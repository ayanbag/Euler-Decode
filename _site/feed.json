{
    "version": "https://jsonfeed.org/version/1",
    "title": "Euler Decode",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": null,
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Ayan Bag",
        "url": "https://ayanbag.com",
        "avatar": null
    },
    
"items": [
    
        {
            "id": "http://localhost:4000/problem-50",
            "title": "Consecutive prime sum",
            "summary": null,
            "content_text": "Problem StatementThe prime 41, can be written as the sum of six consecutive primes:41 = 2 + 3 + 5 + 7 + 11 + 13This is the longest sum of consecutive primes that adds to a prime below one-hundred.The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.Which prime, below one-million, can be written as the sum of the most consecutive primes?Solutiondef sieve(n):    is_prime = [True]*n    is_prime[0] = False    is_prime[1] = False    is_prime[2] = True    for i in range(3,int(n**0.5+1),2):        index = i*2        while index &lt; n:            is_prime[index] = False            index = index+i    prime = [2]    for i in range(3,n,2):        if is_prime[i]:            prime.append(i)    return primeprime=sieve(10**6)val=0lastj=len(prime)l=0for i in range(len(prime)):    for j in range(i+l, lastj):        sol = sum(prime[i:j])        if sol &lt; 1000000:            if sol in prime:                l = j-i                val = sol        else:            lastj = j+1            breakprint(val)Output997651",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The prime 41, can be written as the sum of six consecutive primes:</p><p>41 = 2 + 3 + 5 + 7 + 11 + 13</p><p>This is the longest sum of consecutive primes that adds to a prime below one-hundred.</p><p>The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.</p><p>Which prime, below one-million, can be written as the sum of the most consecutive primes?</p><h3 id=\"solution\">Solution</h3><pre><code>def sieve(n):    is_prime = [True]*n    is_prime[0] = False    is_prime[1] = False    is_prime[2] = True    for i in range(3,int(n**0.5+1),2):        index = i*2        while index &lt; n:            is_prime[index] = False            index = index+i    prime = [2]    for i in range(3,n,2):        if is_prime[i]:            prime.append(i)    return primeprime=sieve(10**6)val=0lastj=len(prime)l=0for i in range(len(prime)):    for j in range(i+l, lastj):        sol = sum(prime[i:j])        if sol &lt; 1000000:            if sol in prime:                l = j-i                val = sol        else:            lastj = j+1            breakprint(val)</code></pre><p><strong>Output</strong></p><pre><code>997651</code></pre>",
            "url": "http://localhost:4000/problem-50",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-49",
            "title": "Prime permutations",
            "summary": null,
            "content_text": "Problem StatementThe arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.What 12-digit number do you form by concatenating the three terms in this sequence?Solutionfrom itertools import permutationsdef sieve(n):    is_prime = [True]*n    is_prime[0] = False    is_prime[1] = False    is_prime[2] = True    for i in range(3,int(n**0.5+1),2):        index = i*2        while index &lt; n:            is_prime[index] = False            index = index+i    prime = [2]    for i in range(3,n,2):        if is_prime[i]:            prime.append(i)    return primeprime=sieve(10000)primes = [x for x in prime if x &gt; 1487]def create(b):    for i in range(len(b)):        for j in range(i+1, len(b)):            difference = b[j] - b[i]            if b[j] + difference in b:                return str(b[i])+str(b[j])+str(b[j]+difference)    return Falsefor i in primes:    p = permutations(str(i))    a = [int(''.join(x)) for x in p]    a = list(set([x for x in a if x in primes]))    a.sort()    if len(a) &gt;= 3:        if create(a):            print (create(a))            breakOutput296962999629",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.</p><p>There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.</p><p>What 12-digit number do you form by concatenating the three terms in this sequence?</p><h3 id=\"solution\">Solution</h3><pre><code>from itertools import permutationsdef sieve(n):    is_prime = [True]*n    is_prime[0] = False    is_prime[1] = False    is_prime[2] = True    for i in range(3,int(n**0.5+1),2):        index = i*2        while index &lt; n:            is_prime[index] = False            index = index+i    prime = [2]    for i in range(3,n,2):        if is_prime[i]:            prime.append(i)    return primeprime=sieve(10000)primes = [x for x in prime if x &gt; 1487]def create(b):    for i in range(len(b)):        for j in range(i+1, len(b)):            difference = b[j] - b[i]            if b[j] + difference in b:                return str(b[i])+str(b[j])+str(b[j]+difference)    return Falsefor i in primes:    p = permutations(str(i))    a = [int(''.join(x)) for x in p]    a = list(set([x for x in a if x in primes]))    a.sort()    if len(a) &gt;= 3:        if create(a):            print (create(a))            break</code></pre><p><strong>Output</strong></p><pre><code>296962999629</code></pre>",
            "url": "http://localhost:4000/problem-49",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-48",
            "title": "Self powers",
            "summary": null,
            "content_text": "Problem StatementThe series, 11 + 22 + 33 + … + 1010 = 10405071317.Find the last ten digits of the series, 11 + 22 + 33 + … + 10001000.Solutionsum1=0for i in range(1,1000+1):    sum1=sum1+(i**i)val=str(sum1)val=val[::-1]print(int(val[0:10][::-1]))Output9110846700",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + … + 10<sup>10</sup> = 10405071317.</p><p>Find the last ten digits of the series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + … + 1000<sup>1000</sup>.</p><h3 id=\"solution\">Solution</h3><pre><code>sum1=0for i in range(1,1000+1):    sum1=sum1+(i**i)val=str(sum1)val=val[::-1]print(int(val[0:10][::-1]))</code></pre><p><strong>Output</strong></p><pre><code>9110846700</code></pre>",
            "url": "http://localhost:4000/problem-48",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-47",
            "title": "Distinct primes factors",
            "summary": null,
            "content_text": "Problem StatementThe first two consecutive numbers to have two distinct prime factors are:14 = 2 × 7 15 = 3 × 5The first three consecutive numbers to have three distinct prime factors are:644 = 22 × 7 × 23 645 = 3 × 5 × 43  646 = 2 × 17 × 19 Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?Solutiondef primefactor(number):    i = 2    a = set()    while i &lt; number**0.5 or number == 1:        if number % i == 0:            number = number/i            a.add(i)            i -= 1        i += 1    return (len(a)+1)j = 2*3*5*7while True:    if primefactor(j) == 4:        j += 1        if primefactor(j) == 4:            j += 1            if primefactor(j) == 4:                j += 1                if primefactor(j) == 4:                    print (j-3)                    break    j += 1Output134043",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The first two consecutive numbers to have two distinct prime factors are:</p><p>14 = 2 × 7 <br />15 = 3 × 5</p><p>The first three consecutive numbers to have three distinct prime factors are:</p><p>644 = 2<sup>2</sup> × 7 × 23 <br />645 = 3 × 5 × 43 <br /> 646 = 2 × 17 × 19 <br /></p><p>Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?</p><h3 id=\"solution\">Solution</h3><pre><code>def primefactor(number):    i = 2    a = set()    while i &lt; number**0.5 or number == 1:        if number % i == 0:            number = number/i            a.add(i)            i -= 1        i += 1    return (len(a)+1)j = 2*3*5*7while True:    if primefactor(j) == 4:        j += 1        if primefactor(j) == 4:            j += 1            if primefactor(j) == 4:                j += 1                if primefactor(j) == 4:                    print (j-3)                    break    j += 1</code></pre><p><strong>Output</strong></p><pre><code>134043</code></pre>",
            "url": "http://localhost:4000/problem-47",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-46",
            "title": "Goldbach's other conjecture",
            "summary": null,
            "content_text": "Problem StatementIt was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.9 = 7 + 2×12 15 = 7 + 2×22 21 = 3 + 2×32 25 = 7 + 2×32 27 = 19 + 2×22 33 = 31 + 2×12 \\It turns out that the conjecture was false.What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?Solutionfrom math import sqrtdef isprime(x):    if x%2==0:        return False    else:        for i in range(3, int(x**0.5+1),2):            if x % i == 0:                return False        return Truenumber=3prime=[2]flag=Truewhile flag:    if isprime(number): prime.append(number)    else:        for i in prime:            if sqrt(((number-i)/2)) == int(sqrt(((number-i)/2))):                break        else:            print(number)            break    number=number+2Output5777",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.</p><p>9 = 7 + 2×1<sup>2</sup> <br />15 = 7 + 2×2<sup>2</sup> <br />21 = 3 + 2×3<sup>2</sup> <br />25 = 7 + 2×3<sup>2</sup> <br />27 = 19 + 2×2<sup>2</sup> <br />33 = 31 + 2×1<sup>2</sup> \\</p><p>It turns out that the conjecture was false.</p><p>What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?</p><h3 id=\"solution\">Solution</h3><pre><code>from math import sqrtdef isprime(x):    if x%2==0:        return False    else:        for i in range(3, int(x**0.5+1),2):            if x % i == 0:                return False        return Truenumber=3prime=[2]flag=Truewhile flag:    if isprime(number): prime.append(number)    else:        for i in prime:            if sqrt(((number-i)/2)) == int(sqrt(((number-i)/2))):                break        else:            print(number)            break    number=number+2</code></pre><p><strong>Output</strong></p><pre><code>5777</code></pre>",
            "url": "http://localhost:4000/problem-46",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-45",
            "title": "Triangular, pentagonal, and hexagonal",
            "summary": null,
            "content_text": "Problem StatementTriangle, pentagonal, and hexagonal numbers are generated by the following formulae:Triangle:\t \tTn=n(n+1)/2\t \t1, 3, 6, 10, 15, … Pentagonal:\t \tPn=n(3n−1)/2\t \t1, 5, 12, 22, 35, … Hexagonal:\t \tHn=n(2n−1)\t \t1, 6, 15, 28, 45, … It can be verified that T285 = P165 = H143 = 40755.Find the next triangle number that is also pentagonal and hexagonal.Solutiondef pentagonal(n):    if (1+(24*n+1)**0.5) % 6 == 0:        return True    return Falsedef hexagonal(n):    if (1+(8*n+1)**0.5)%4 == 0:        return True    return Falseflag =Truewhile flag:    for i in range(1,10**6):        a=int(i*(i+1)/2)        if hexagonal(a) and pentagonal(a):            if a &gt; 40755:                 print(a)                flag=False                breakOutput1533776805",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:</p><p>Triangle:\t \tT<sub>n</sub>=n(n+1)/2\t \t1, 3, 6, 10, 15, … <br />Pentagonal:\t \tP<sub>n</sub>=n(3n−1)/2\t \t1, 5, 12, 22, 35, … <br />Hexagonal:\t \tH<sub>n</sub>=n(2n−1)\t \t1, 6, 15, 28, 45, … <br /></p><p>It can be verified that T<sub>285</sub> = P<sub>165</sub> = H<sub>143</sub> = 40755.</p><p>Find the next triangle number that is also pentagonal and hexagonal.</p><h3 id=\"solution\">Solution</h3><pre><code>def pentagonal(n):    if (1+(24*n+1)**0.5) % 6 == 0:        return True    return Falsedef hexagonal(n):    if (1+(8*n+1)**0.5)%4 == 0:        return True    return Falseflag =Truewhile flag:    for i in range(1,10**6):        a=int(i*(i+1)/2)        if hexagonal(a) and pentagonal(a):            if a &gt; 40755:                 print(a)                flag=False                break</code></pre><p><strong>Output</strong></p><pre><code>1533776805</code></pre>",
            "url": "http://localhost:4000/problem-45",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-44",
            "title": "Pentagon numbers",
            "summary": null,
            "content_text": "Problem StatementPentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:\\[1, \\ 5, \\ 12, \\ 22, \\ 35, \\ 51, \\ 70, \\ 92, \\ 117, \\ 145, \\ ...\\]It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = mod(Pk − Pj) is minimised; what is the value of D?Solutiondef pentagonal(n):    if (1+(24*n+1)**0.5) % 6 == 0:        return True    return Falseflag = Truei = 1while flag:    for j in range(1, i):        a = i*(3*i-1)/2        b = j*(3*j-1)/2        if pentagonal(a+b) and pentagonal(a-b):            print (a-b)            flag = False            break    i += 1Output5482660",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Pentagonal numbers are generated by the formula, P<sub>n</sub>=n(3n−1)/2. The first ten pentagonal numbers are:</p>\\[1, \\ 5, \\ 12, \\ 22, \\ 35, \\ 51, \\ 70, \\ 92, \\ 117, \\ 145, \\ ...\\]<p>It can be seen that P<sub>4</sub> + P<sub>7</sub> = 22 + 70 = 92 = P<sub>8</sub>. However, their difference, 70 − 22 = 48, is not pentagonal.</p><p>Find the pair of pentagonal numbers, P<sub>j</sub> and P<sub>k</sub>, for which their sum and difference are pentagonal and D = mod(P<sub>k</sub> − P<sub>j</sub>) is minimised; what is the value of D?</p><h3 id=\"solution\">Solution</h3><pre><code>def pentagonal(n):    if (1+(24*n+1)**0.5) % 6 == 0:        return True    return Falseflag = Truei = 1while flag:    for j in range(1, i):        a = i*(3*i-1)/2        b = j*(3*j-1)/2        if pentagonal(a+b) and pentagonal(a-b):            print (a-b)            flag = False            break    i += 1</code></pre><p><strong>Output</strong></p><pre><code>5482660</code></pre>",
            "url": "http://localhost:4000/problem-44",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-43",
            "title": "Sub-string divisibility",
            "summary": null,
            "content_text": "Problem StatementThe number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:  d2d3d4=406 is divisible by 2  d3d4d5=063 is divisible by 3  d4d5d6=635 is divisible by 5  d5d6d7=357 is divisible by 7  d6d7d8=572 is divisible by 11  d7d8d9=728 is divisible by 13  d8d9d10=289 is divisible by 17Find the sum of all 0 to 9 pandigital numbers with this property.Solutionfrom itertools import permutationsa='1234567890'p=permutations(a[:10])sum1=0for i in p:    if i[0]!='0':        temp=''.join(list(i))        if int(temp[1:4])%2==0 and int(temp[2:5])%3==0 and int(temp[3:6])%5==0 and int(temp[4:7])%7==0 and int(temp[5:8])%11==0 and int(temp[6:9])%13==0 and int(temp[7:10])%17==0:            sum1=sum1+int(temp)print(sum1)Output16695334890",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.</p><p>Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:</p><ul>  <li>d<sub>2</sub>d<sub>3</sub>d<sub>4</sub>=406 is divisible by 2</li>  <li>d<sub>3</sub>d<sub>4</sub>d<sub>5</sub>=063 is divisible by 3</li>  <li>d<sub>4</sub>d<sub>5</sub>d<sub>6</sub>=635 is divisible by 5</li>  <li>d<sub>5</sub>d<sub>6</sub>d<sub>7</sub>=357 is divisible by 7</li>  <li>d<sub>6</sub>d<sub>7</sub>d<sub>8</sub>=572 is divisible by 11</li>  <li>d<sub>7</sub>d<sub>8</sub>d<sub>9</sub>=728 is divisible by 13</li>  <li>d<sub>8</sub>d<sub>9</sub>d<sub>10</sub>=289 is divisible by 17</li></ul><p>Find the sum of all 0 to 9 pandigital numbers with this property.</p><h3 id=\"solution\">Solution</h3><pre><code>from itertools import permutationsa='1234567890'p=permutations(a[:10])sum1=0for i in p:    if i[0]!='0':        temp=''.join(list(i))        if int(temp[1:4])%2==0 and int(temp[2:5])%3==0 and int(temp[3:6])%5==0 and int(temp[4:7])%7==0 and int(temp[5:8])%11==0 and int(temp[6:9])%13==0 and int(temp[7:10])%17==0:            sum1=sum1+int(temp)print(sum1)</code></pre><p><strong>Output</strong></p><pre><code>16695334890</code></pre>",
            "url": "http://localhost:4000/problem-43",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-42",
            "title": "Coded triangle numbers",
            "summary": null,
            "content_text": "Problem StatementThe nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.Using words.txt, a 16K text file containing nearly two-thousand common English words, how many are triangle words?Solutionname=[]with open('words.txt','r') as file:     for line in file:         for word in line.split(','):             word=word.strip('\"')            name.append(word) val=dict()temp=1for i in range(65,91):    val[chr(i)] = temp    temp+=1def tvalue():    val1=[]    for n in range(1,26*10):        tmp=int((n+1)*n*0.5)        val1.append(tmp)    return val1t=tvalue()count=0for i in name:    s=0    for j in i:        s=s+val[j]    if s in t:        count=count+1print(count)Output162",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:</p><p>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …</p><p>By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.</p><p>Using <a href=\"https://projecteuler.net/project/resources/p042_words.txt\">words.txt</a>, a 16K text file containing nearly two-thousand common English words, how many are triangle words?</p><h3 id=\"solution\">Solution</h3><pre><code>name=[]with open('words.txt','r') as file:     for line in file:         for word in line.split(','):             word=word.strip('\"')            name.append(word) val=dict()temp=1for i in range(65,91):    val[chr(i)] = temp    temp+=1def tvalue():    val1=[]    for n in range(1,26*10):        tmp=int((n+1)*n*0.5)        val1.append(tmp)    return val1t=tvalue()count=0for i in name:    s=0    for j in i:        s=s+val[j]    if s in t:        count=count+1print(count)</code></pre><p><strong>Output</strong></p><pre><code>162</code></pre>",
            "url": "http://localhost:4000/problem-42",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-41",
            "title": "Pandigital prime",
            "summary": null,
            "content_text": "Problem StatementWe shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.What is the largest n-digit pandigital prime that exists?Solutionimport itertoolsdef isprime(n):    for i in range(2, int(n**0.5)+1):        if n % i == 0:            return False    return Truea='123456789'j=9flag=Truewhile flag:    z=itertools.permutations(a[:j])    z = list(z)[::-1]    for i in z:        if int(i[j-1]) % 2 != 0:            number = int(''.join(i))            if (number+1) % 6 == 0 or (number-1) % 6 == 0:                 if isprime(number):                    print (number)                    flag = False                    break    j -= 1Output7652413",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.</p><p>What is the largest n-digit pandigital prime that exists?</p><h3 id=\"solution\">Solution</h3><pre><code>import itertoolsdef isprime(n):    for i in range(2, int(n**0.5)+1):        if n % i == 0:            return False    return Truea='123456789'j=9flag=Truewhile flag:    z=itertools.permutations(a[:j])    z = list(z)[::-1]    for i in z:        if int(i[j-1]) % 2 != 0:            number = int(''.join(i))            if (number+1) % 6 == 0 or (number-1) % 6 == 0:                 if isprime(number):                    print (number)                    flag = False                    break    j -= 1</code></pre><p><strong>Output</strong></p><pre><code>7652413</code></pre>",
            "url": "http://localhost:4000/problem-41",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-40",
            "title": "Champernowne's constant",
            "summary": null,
            "content_text": "Problem StatementAn irrational decimal fraction is created by concatenating the positive integers:0.123456789101112131415161718192021…It can be seen that the 12th digit of the fractional part is 1.If dn represents the nth digit of the fractional part, find the value of the following expression.d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000Solutionnumber=\"\"for i in range(1,10**6+1):    number=number+str(i)r =int(number[1-1]) * int(number[10-1]) * int(number[100-1]) * int(number[1000-1]) * int(number[10000-1]) * int(number[100000-1]) * int(number[1000000-1])print(r)Output210",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>An irrational decimal fraction is created by concatenating the positive integers:</p><p>0.12345678910<strong>1</strong>112131415161718192021…</p><p>It can be seen that the 12<sup>th</sup> digit of the fractional part is 1.</p><p>If dn represents the nth digit of the fractional part, find the value of the following expression.</p><p><em>d<sub>1</sub> × d<sub>10</sub> × d<sub>100</sub> × d<sub>1000</sub> × d<sub>10000</sub> × d<sub>100000</sub> × d<sub>1000000</sub></em></p><h3 id=\"solution\">Solution</h3><pre><code>number=\"\"for i in range(1,10**6+1):    number=number+str(i)r =int(number[1-1]) * int(number[10-1]) * int(number[100-1]) * int(number[1000-1]) * int(number[10000-1]) * int(number[100000-1]) * int(number[1000000-1])print(r)</code></pre><p><strong>Output</strong></p><pre><code>210</code></pre>",
            "url": "http://localhost:4000/problem-40",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-39",
            "title": "Integer right triangles",
            "summary": null,
            "content_text": "Problem StatementIf p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.{20,48,52}, {24,45,51}, {30,40,50}For which value of p ≤ 1000, is the number of solutions maximised?Solutiondef triplets(p):    val=[]    for a in range(1,p):        b=int((p*(p-2*a))/(2*(p-a)))        c=p-a-b        if (a*a+b*b)==c*c and a+b&gt;c and b&gt;a:            val.append([a,b,c])    return valval2=[]temp=[]for p in range(3,1001):    temp=triplets(p)    if len(temp)&gt;len(val2):        val2=temp        peri = pprint(peri)Output840",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.</p><p>{20,48,52}, {24,45,51}, {30,40,50}</p><p>For which value of p ≤ 1000, is the number of solutions maximised?</p><h3 id=\"solution\">Solution</h3><pre><code>def triplets(p):    val=[]    for a in range(1,p):        b=int((p*(p-2*a))/(2*(p-a)))        c=p-a-b        if (a*a+b*b)==c*c and a+b&gt;c and b&gt;a:            val.append([a,b,c])    return valval2=[]temp=[]for p in range(3,1001):    temp=triplets(p)    if len(temp)&gt;len(val2):        val2=temp        peri = pprint(peri)</code></pre><p><strong>Output</strong></p><pre><code>840</code></pre>",
            "url": "http://localhost:4000/problem-39",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-38",
            "title": "Pandigital multiples",
            "summary": null,
            "content_text": "Problem StatementTake the number 192 and multiply it by each of 1, 2, and 3:192 × 1 = 192 192 × 2 = 384 192 × 3 = 576By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, … , n) where n &gt; 1?Solutionlargest = 0for i in range(1,10000):\t\tmultiplication = ''\t\tinteger = 1\t\twhile len(multiplication) &lt; 9:\t\t\t\tmultiplication += str(i*integer)\t\t\t\tinteger += 1\t\t\tif ((len(multiplication) == 9) and (len(set(multiplication)) == 9) \t\tand ('0' not in multiplication)):\t\t\tif int(multiplication) &gt; largest:\t\t\tlargest = int(multiplication)print (largest)Output932718654",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Take the number 192 and multiply it by each of 1, 2, and 3:</p><p>192 × 1 = 192 <br />192 × 2 = 384 <br />192 × 3 = 576</p><p>By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)</p><p>The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).</p><p>What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, … , n) where n &gt; 1?</p><h3 id=\"solution\">Solution</h3><pre><code>largest = 0for i in range(1,10000):\t\tmultiplication = ''\t\tinteger = 1\t\twhile len(multiplication) &lt; 9:\t\t\t\tmultiplication += str(i*integer)\t\t\t\tinteger += 1\t\t\tif ((len(multiplication) == 9) and (len(set(multiplication)) == 9) \t\tand ('0' not in multiplication)):\t\t\tif int(multiplication) &gt; largest:\t\t\tlargest = int(multiplication)print (largest)</code></pre><p><strong>Output</strong></p><pre><code>932718654</code></pre>",
            "url": "http://localhost:4000/problem-38",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-36",
            "title": "Double-base palindromes",
            "summary": null,
            "content_text": "Problem StatementThe decimal number, 585 = 10010010012(binary), is palindromic in both bases.Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.(Please note that the palindromic number, in either base, may not include leading zeros.)Solutiondef decimalToBinary(n):      return bin(n).replace(\"0b\", \"\")  def palindrome(x):    if x==x[::-1]:        return Truesum1=0  for i in range(1,10**6):    if palindrome(str(i)):        if palindrome(str(decimalToBinary(i))):            sum1=sum1+i            print(sum1)Output872187",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The decimal number, 585 = 1001001001<sub>2</sub>(binary), is palindromic in both bases.</p><p>Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.</p><p>(Please note that the palindromic number, in either base, may not include leading zeros.)</p><h3 id=\"solution\">Solution</h3><pre><code>def decimalToBinary(n):      return bin(n).replace(\"0b\", \"\")  def palindrome(x):    if x==x[::-1]:        return Truesum1=0  for i in range(1,10**6):    if palindrome(str(i)):        if palindrome(str(decimalToBinary(i))):            sum1=sum1+i            print(sum1)</code></pre><p><strong>Output</strong></p><pre><code>872187</code></pre>",
            "url": "http://localhost:4000/problem-36",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-35",
            "title": "Circular primes",
            "summary": null,
            "content_text": "Problem StatementThe number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.How many circular primes are there below one million?Solutiondef sieve(n):\tis_prime = [True]*n\tis_prime[0] = False\tis_prime[1] = False\tis_prime[2] = True\tfor i in range(3,int(n**0.5+1),2):\t\tindex = i*2\t\twhile index &lt; n:\t\t\tis_prime[index] = False\t\t\tindex = index+i\tprime = [2]\tfor i in range(3,n,2):\t\tif is_prime[i]:\t\t\tprime.append(i)\treturn primeprimes = sieve(1000000)counter = 0for i in primes:\tflag = True\tnumber = i/10\twhile number:\t\tif (number%10) % 2 == 0 or (number%10)%5 == 0:\t\t\tflag = False\t\t\tbreak\t\tnumber //= 10\tif flag:\t\tlength = len(str(i))\t\tnumber = i\t\tcounter += 1\t\tfor j in range(length):\t\t\tnumber = (number%10)*10**(length-1)+number//10\t\t\tif number not in primes:\t\t\t\tcounter -= 1\t\t\t\tbreakprint (counter)Output55",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.</p><p>There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.</p><p>How many circular primes are there below one million?</p><h3 id=\"solution\">Solution</h3><pre><code>def sieve(n):\tis_prime = [True]*n\tis_prime[0] = False\tis_prime[1] = False\tis_prime[2] = True\tfor i in range(3,int(n**0.5+1),2):\t\tindex = i*2\t\twhile index &lt; n:\t\t\tis_prime[index] = False\t\t\tindex = index+i\tprime = [2]\tfor i in range(3,n,2):\t\tif is_prime[i]:\t\t\tprime.append(i)\treturn primeprimes = sieve(1000000)counter = 0for i in primes:\tflag = True\tnumber = i/10\twhile number:\t\tif (number%10) % 2 == 0 or (number%10)%5 == 0:\t\t\tflag = False\t\t\tbreak\t\tnumber //= 10\tif flag:\t\tlength = len(str(i))\t\tnumber = i\t\tcounter += 1\t\tfor j in range(length):\t\t\tnumber = (number%10)*10**(length-1)+number//10\t\t\tif number not in primes:\t\t\t\tcounter -= 1\t\t\t\tbreakprint (counter)</code></pre><p><strong>Output</strong></p><pre><code>55</code></pre>",
            "url": "http://localhost:4000/problem-35",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-34",
            "title": "Digit factorials",
            "summary": null,
            "content_text": "Problem Statement145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.Find the sum of all numbers which are equal to the sum of the factorial of their digits.Note: as 1! = 1 and 2! = 2 are not sums they are not included.Solutiondef factorial(x):    fact = 1      for i in range(1,x+1):         fact = fact * i     return factval=[]for i in range(3,10**6):    a=str(i)    sum1=0        for j in a:        sum1=sum1+factorial(int(j))    if int(a) == sum1 :         val.append(int(a))    print(sum(val))Output40730",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.</p><p>Find the sum of all numbers which are equal to the sum of the factorial of their digits.</p><p>Note: as 1! = 1 and 2! = 2 are not sums they are not included.</p><h3 id=\"solution\">Solution</h3><pre><code>def factorial(x):    fact = 1      for i in range(1,x+1):         fact = fact * i     return factval=[]for i in range(3,10**6):    a=str(i)    sum1=0        for j in a:        sum1=sum1+factorial(int(j))    if int(a) == sum1 :         val.append(int(a))    print(sum(val))</code></pre><p><strong>Output</strong></p><pre><code>40730</code></pre>",
            "url": "http://localhost:4000/problem-34",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-32",
            "title": "Pandigital products",
            "summary": null,
            "content_text": "Problem StatementWe shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.Solutionfrom collections import Counterdef pandigital(x):    a=str(x)    j=Counter(a)    val=0    for i in '123456789':        if i in j:            if j[i]==1:                val=val+1    if val==9:        return True    return Falsep = set()for i in range(2,  60):    start = 1234 if i &lt; 10 else 123     for j in range(start, 10000//i):        if pandigital(str(i) + str(j) + str(i*j)): p.add(i*j)print(sum(p))Output45228",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.</p><p>The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.</p><p>Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.</p><h3 id=\"solution\">Solution</h3><pre><code>from collections import Counterdef pandigital(x):    a=str(x)    j=Counter(a)    val=0    for i in '123456789':        if i in j:            if j[i]==1:                val=val+1    if val==9:        return True    return Falsep = set()for i in range(2,  60):    start = 1234 if i &lt; 10 else 123     for j in range(start, 10000//i):        if pandigital(str(i) + str(j) + str(i*j)): p.add(i*j)print(sum(p))</code></pre><p><strong>Output</strong></p><pre><code>45228</code></pre>",
            "url": "http://localhost:4000/problem-32",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-31",
            "title": "Coin sums",
            "summary": null,
            "content_text": "Problem StatementIn the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).It is possible to make £2 in the following way:1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1pHow many different ways can £2 be made using any number of coins?Solutioncoins = [1, 2, 5, 10, 20, 50, 100, 200]ways = [1] + [0]*200for coin in coins:    for i in range(coin,201):        ways[i] += ways[i-coin]print(ways[200])Output73682",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:</p><p>1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).</p><p>It is possible to make £2 in the following way:</p><p>1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p</p><p>How many different ways can £2 be made using any number of coins?</p><h3 id=\"solution\">Solution</h3><pre><code>coins = [1, 2, 5, 10, 20, 50, 100, 200]ways = [1] + [0]*200for coin in coins:    for i in range(coin,201):        ways[i] += ways[i-coin]print(ways[200])</code></pre><p><strong>Output</strong></p><pre><code>73682</code></pre>",
            "url": "http://localhost:4000/problem-31",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-30",
            "title": "Digit fifth powers",
            "summary": null,
            "content_text": "Problem StatementSurprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:1634 = 14 + 64 + 34 + 44 8208 = 84 + 24 + 04 + 84 9474 = 94 + 44 + 74 + 44 As 1 = 14 is not a sum it is not included.The sum of these numbers is 1634 + 8208 + 9474 = 19316.Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.Solutionfinal=[]for a in range(2,355000):    s=list(str(a))    temp=0    for i in s:        temp=temp+int(i)**5    if temp==a:        final.append(temp)    print(sum(final))Output443839",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:</p><p>1634 = 1<sup>4</sup> + 6<sup>4</sup> + 3<sup>4</sup> + 4<sup>4</sup> <br />8208 = 8<sup>4</sup> + 2<sup>4</sup> + 0<sup>4</sup> + 8<sup>4</sup> <br />9474 = 9<sup>4</sup> + 4<sup>4</sup> + 7<sup>4</sup> + 4<sup>4</sup> <br />As 1 = 1<sup>4</sup> is not a sum it is not included.</p><p>The sum of these numbers is 1634 + 8208 + 9474 = 19316.</p><p>Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.</p><h3 id=\"solution\">Solution</h3><pre><code>final=[]for a in range(2,355000):    s=list(str(a))    temp=0    for i in s:        temp=temp+int(i)**5    if temp==a:        final.append(temp)    print(sum(final))</code></pre><p><strong>Output</strong></p><pre><code>443839</code></pre>",
            "url": "http://localhost:4000/problem-30",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-29",
            "title": "Distinct powers",
            "summary": null,
            "content_text": "Problem StatementConsider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:22=4, 23=8, 24=16, 25=32 32=9, 33=27, 34=81, 35=243 42=16, 43=64, 44=256, 45=1024 52=25, 53=125, 54=625, 55=3125 \\If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?Solutiontotal=[]for a in range(2,101):    for b in range(2,101):        total.append(a**b)        total1=set(total)print(len(total1))Output9183",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:</p><p>2<sup>2</sup>=4, 2<sup>3</sup>=8, 2<sup>4</sup>=16, 2<sup>5</sup>=32 <br />3<sup>2</sup>=9, 3<sup>3</sup>=27, 3<sup>4</sup>=81, 3<sup>5</sup>=243 <br />4<sup>2</sup>=16, 4<sup>3</sup>=64, 4<sup>4</sup>=256, 4<sup>5</sup>=1024 <br />5<sup>2</sup>=25, 5<sup>3</sup>=125, 5<sup>4</sup>=625, 5<sup>5</sup>=3125 \\</p><p>If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:</p><p>4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125</p><p>How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?</p><h3 id=\"solution\">Solution</h3><pre><code>total=[]for a in range(2,101):    for b in range(2,101):        total.append(a**b)        total1=set(total)print(len(total1))</code></pre><p><strong>Output</strong></p><pre><code>9183</code></pre>",
            "url": "http://localhost:4000/problem-29",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-28",
            "title": "Number spiral diagonals",
            "summary": null,
            "content_text": "Problem StatementStarting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:\\[\\\\ 21 \\ \\ 22 \\ \\ 23 \\ \\ 24 \\ \\ 25 \\\\ 20 \\ \\ \\ 7 \\ \\ \\ 8 \\ \\ \\ 9 \\ \\ \\ 10 \\\\ 19 \\ \\ \\ 6 \\ \\ \\ 1 \\ \\ \\ 2 \\ \\ \\ 11 \\\\ 18 \\ \\ \\ 5 \\ \\ \\ 4 \\ \\ \\ 3 \\ \\ \\ 12 \\\\ 17 \\ \\ 16 \\ \\ 15 \\ \\ 14 \\ \\ 13\\]It can be verified that the sum of the numbers on the diagonals is 101.What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?Solutiondef printSpiral(n) :     val=[]    for i in range(0, n) :         for j in range(0, n) :                           x = min(min(i, j), min(n - 1 - i, n - 1 - j))                           if (i &lt;= j) :                 q=(n - 2 * x) * (n - 2 * x) - (i - x)- (j - x)                val.append(q)              else :                 q=((n - 2 * x - 2) *                       (n - 2 * x - 2) +                       (i - x) + (j - x))                val.append(q)                    return val           n = 1001final=[]sum1=0sum2=0j=0val=[] val = printSpiral(n)for i in range(0,len(val),n):    final.append(val[i:i+n][::-1])for i in range(len(final)):    sum1+=final[i][i]for i in range(len(final)):    sum2+=final[i][len(final[i])-j-1]    j=j+1    print(sum1+sum2-final[len(final)//2][len(final[0])//2])Output669171001",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:</p>\\[\\\\ 21 \\ \\ 22 \\ \\ 23 \\ \\ 24 \\ \\ 25 \\\\ 20 \\ \\ \\ 7 \\ \\ \\ 8 \\ \\ \\ 9 \\ \\ \\ 10 \\\\ 19 \\ \\ \\ 6 \\ \\ \\ 1 \\ \\ \\ 2 \\ \\ \\ 11 \\\\ 18 \\ \\ \\ 5 \\ \\ \\ 4 \\ \\ \\ 3 \\ \\ \\ 12 \\\\ 17 \\ \\ 16 \\ \\ 15 \\ \\ 14 \\ \\ 13\\]<p>It can be verified that the sum of the numbers on the diagonals is 101.</p><p>What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?</p><h3 id=\"solution\">Solution</h3><pre><code>def printSpiral(n) :     val=[]    for i in range(0, n) :         for j in range(0, n) :                           x = min(min(i, j), min(n - 1 - i, n - 1 - j))                           if (i &lt;= j) :                 q=(n - 2 * x) * (n - 2 * x) - (i - x)- (j - x)                val.append(q)              else :                 q=((n - 2 * x - 2) *                       (n - 2 * x - 2) +                       (i - x) + (j - x))                val.append(q)                    return val           n = 1001final=[]sum1=0sum2=0j=0val=[] val = printSpiral(n)for i in range(0,len(val),n):    final.append(val[i:i+n][::-1])for i in range(len(final)):    sum1+=final[i][i]for i in range(len(final)):    sum2+=final[i][len(final[i])-j-1]    j=j+1    print(sum1+sum2-final[len(final)//2][len(final[0])//2])</code></pre><p><strong>Output</strong></p><pre><code>669171001</code></pre>",
            "url": "http://localhost:4000/problem-28",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-26",
            "title": "Reciprocal cycles",
            "summary": null,
            "content_text": "Problem StatementA unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:\\[1/2\t= \t0.5 \\\\ 1/3\t= \t0.(3) \\\\1/4\t= \t0.25 \\\\1/5\t= \t0.2 \\\\1/6\t= \t0.1(6) \\\\1/7\t= \t0.(142857) \\\\1/8\t= \t0.125 \\\\1/9\t= \t0.(1) \\\\1/10 = \t0.1 \\\\\\]Where 0.1(6) means 0.166666…, and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.Find the value of d &lt; 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.Solutiondef divide(n,d,p):    i = 0     remainders = set()         while i &lt; p:        if n &lt; d:            n = n * 10                 n = n % d         if n in remainders:             return(d,i)         else:            remainders.add(n)                 i = i + 1     longest = [0,0]largest_denominator = 1000for x in range(2,largest_denominator + 1):  y = divide(1,x,x)   if y[1] &gt; longest[1]:    longest = yprint(longest[0])Output983",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:</p>\\[1/2\t= \t0.5 \\\\ 1/3\t= \t0.(3) \\\\1/4\t= \t0.25 \\\\1/5\t= \t0.2 \\\\1/6\t= \t0.1(6) \\\\1/7\t= \t0.(142857) \\\\1/8\t= \t0.125 \\\\1/9\t= \t0.(1) \\\\1/10 = \t0.1 \\\\\\]<p>Where 0.1(6) means 0.166666…, and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.</p><p>Find the value of d &lt; 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.</p><h3 id=\"solution\">Solution</h3><pre><code>def divide(n,d,p):    i = 0     remainders = set()         while i &lt; p:        if n &lt; d:            n = n * 10                 n = n % d         if n in remainders:             return(d,i)         else:            remainders.add(n)                 i = i + 1     longest = [0,0]largest_denominator = 1000for x in range(2,largest_denominator + 1):  y = divide(1,x,x)   if y[1] &gt; longest[1]:    longest = yprint(longest[0])</code></pre><p><strong>Output</strong></p><pre><code>983</code></pre>",
            "url": "http://localhost:4000/problem-26",
            
            
            
            
            
            "date_published": "2020-07-15T00:00:00+05:30",
            "date_modified": "2020-07-15T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-25",
            "title": "1000-digit Fibonacci number",
            "summary": null,
            "content_text": "Problem StatementThe Fibonacci sequence is defined by the recurrence relation:Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.Hence the first 12 terms will be:F1 = 1 F2 = 1 F3 = 2 F4 = 3 F5 = 5 F6 = 8 F7 = 13 F8 = 21 F9 = 34 F10 = 55 F11 = 89 F12 = 144 The 12th term, F12, is the first term to contain three digits.What is the index of the first term in the Fibonacci sequence to contain 1000 digits?Solutiondef fibonacci():    g=0    i=2    l=[1,1]    while(g&lt;1000):        temp=l[i-1]+l[i-2]        l.append(temp)        g=len(str(temp))        index=i        i=i+1            return index+1print(fibonacci())Output4782",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The Fibonacci sequence is defined by the recurrence relation:</p><p>F<sub>n</sub> = F<sub>n−1</sub> + F<sub>n−2</sub>, where F<sub>1</sub> = 1 and F<sub>2</sub> = 1.</p><p>Hence the first 12 terms will be:</p><p>F<sub>1</sub> = 1 <br />F<sub>2</sub> = 1 <br />F<sub>3</sub> = 2 <br />F<sub>4</sub> = 3 <br />F<sub>5</sub> = 5 <br />F<sub>6</sub> = 8 <br />F<sub>7</sub> = 13 <br />F<sub>8</sub> = 21 <br />F<sub>9</sub> = 34 <br />F<sub>10</sub> = 55 <br />F<sub>11</sub> = 89 <br />F<sub>12</sub> = 144 <br /></p><p>The 12th term, F<sub>12</sub>, is the first term to contain three digits.</p><p>What is the index of the first term in the Fibonacci sequence to contain 1000 digits?</p><h3 id=\"solution\">Solution</h3><pre><code>def fibonacci():    g=0    i=2    l=[1,1]    while(g&lt;1000):        temp=l[i-1]+l[i-2]        l.append(temp)        g=len(str(temp))        index=i        i=i+1            return index+1print(fibonacci())</code></pre><p><strong>Output</strong></p><pre><code>4782</code></pre>",
            "url": "http://localhost:4000/problem-25",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-24",
            "title": "Lexicographic permutations",
            "summary": null,
            "content_text": "Problem StatementA permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:\\[012 \\ 021 \\ 102 \\ 120 \\ 201 \\ 210\\]What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?Solutionfrom itertools import permutationsperms = [''.join(p) for p in permutations('0123456789')]prm=sorted(perms)print(prm[10**6-1]) Output2783915460",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:</p>\\[012 \\ 021 \\ 102 \\ 120 \\ 201 \\ 210\\]<p>What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?</p><h3 id=\"solution\">Solution</h3><pre><code>from itertools import permutationsperms = [''.join(p) for p in permutations('0123456789')]prm=sorted(perms)print(prm[10**6-1]) </code></pre><p><strong>Output</strong></p><pre><code>2783915460</code></pre>",
            "url": "http://localhost:4000/problem-24",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-22",
            "title": "Names scores",
            "summary": null,
            "content_text": "Problem StatementUsing name.txt, a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.What is the total of all the name scores in the file?Solutionname=[]with open('name.txt','r') as file:     for line in file:         for word in line.split(','):             word=word.strip('\"')            name.append(word) name=sorted(name)total=0val=dict()j=1for i in range(65,91):    val[chr(i)]=j;    j=j+1for x in name:    temp=0    for j in x:        temp+=val[j]    total+=((name.index(x)+1)*temp)print(total)Output871198282",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Using <a href=\"https://projecteuler.net/project/resources/p022_names.txt\">name.txt</a>, a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.</p><p>For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.</p><p>What is the total of all the name scores in the file?</p><h3 id=\"solution\">Solution</h3><pre><code>name=[]with open('name.txt','r') as file:     for line in file:         for word in line.split(','):             word=word.strip('\"')            name.append(word) name=sorted(name)total=0val=dict()j=1for i in range(65,91):    val[chr(i)]=j;    j=j+1for x in name:    temp=0    for j in x:        temp+=val[j]    total+=((name.index(x)+1)*temp)print(total)</code></pre><p><strong>Output</strong></p><pre><code>871198282</code></pre>",
            "url": "http://localhost:4000/problem-22",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-21",
            "title": "Amicable numbers",
            "summary": null,
            "content_text": "Problem StatementLet d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.Evaluate the sum of all the amicable numbers under 10000.Solutiondef divisor(x):    lt=[]    for i in range(1,x):        if x%i==0:            lt.append(i)    return ltdef d(s):    return sum(divisor(s))am_num=[]for i in range(1,10000+1):    a=d(i)    b=d(a)    if b==i and a!=i:        am_num.append(i)print (sum(am_num))Output31626",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.</p><p>For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.</p><p>Evaluate the sum of all the amicable numbers under 10000.</p><h3 id=\"solution\">Solution</h3><pre><code>def divisor(x):    lt=[]    for i in range(1,x):        if x%i==0:            lt.append(i)    return ltdef d(s):    return sum(divisor(s))am_num=[]for i in range(1,10000+1):    a=d(i)    b=d(a)    if b==i and a!=i:        am_num.append(i)print (sum(am_num))</code></pre><p><strong>Output</strong></p><pre><code>31626</code></pre>",
            "url": "http://localhost:4000/problem-21",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-20",
            "title": "Factorial digit sum",
            "summary": null,
            "content_text": "Problem Statementn! means n × (n − 1) × … × 3 × 2 × 1For example, 10! = 10 × 9 × … × 3 × 2 × 1 = 3628800,and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.Find the sum of the digits in the number 100!Solutionfrom math import factoriala=list(str(factorial(100)))sum=0for i in a:    sum+=int(i)print(sum)Output648",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>n! means n × (n − 1) × … × 3 × 2 × 1</p><p>For example, 10! = 10 × 9 × … × 3 × 2 × 1 = 3628800,and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.</p><p>Find the sum of the digits in the number 100!</p><h3 id=\"solution\">Solution</h3><pre><code>from math import factoriala=list(str(factorial(100)))sum=0for i in a:    sum+=int(i)print(sum)</code></pre><p><strong>Output</strong></p><pre><code>648</code></pre>",
            "url": "http://localhost:4000/problem-20",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-19",
            "title": "Counting Sundays",
            "summary": null,
            "content_text": "Problem StatementYou are given the following information, but you may prefer to do some research for yourself.  1 Jan 1900 was a Monday.  Thirty days has September, April, June and November. All the rest have thirty-one, Saving February alone, Which has twenty-eight, rain or shine. And on leap years, twenty-nine.  A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?Solutionfrom datetime import *counter = 0year = 1901month = 1curr_day = date(year,month,1)while(curr_day.year &lt; 2001):\tif(curr_day.weekday() == 6):\t\tcounter += 1\tif(month+1 == 13):\t\tmonth = 1\t\tyear += 1\telse:\t\tmonth += 1\tcurr_day = date(year,month,1)print(str(counter))Output171",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>You are given the following information, but you may prefer to do some research for yourself.</p><ul>  <li>1 Jan 1900 was a Monday.</li>  <li>Thirty days has September, April, June and November. All the rest have thirty-one, Saving February alone, Which has twenty-eight, rain or shine. And on leap years, twenty-nine.</li>  <li>A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li></ul><p>How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</p><h3 id=\"solution\">Solution</h3><pre><code>from datetime import *counter = 0year = 1901month = 1curr_day = date(year,month,1)while(curr_day.year &lt; 2001):\tif(curr_day.weekday() == 6):\t\tcounter += 1\tif(month+1 == 13):\t\tmonth = 1\t\tyear += 1\telse:\t\tmonth += 1\tcurr_day = date(year,month,1)print(str(counter))</code></pre><p><strong>Output</strong></p><pre><code>171</code></pre>",
            "url": "http://localhost:4000/problem-19",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-18",
            "title": "Maximum path sum I",
            "summary": null,
            "content_text": "Problem StatementBy starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.3 7 4 2 4 6 8 5 9 3 That is, 3 + 7 + 4 + 9 = 23.Find the maximum total from top to bottom of the triangle below:75 95 64 17 47 82 18 35 87 10 20 04 82 47 65 19 01 23 75 03 34 88 02 77 73 07 63 67 99 65 04 28 06 16 70 92 41 41 26 56 83 40 80 70 33 41 48 72 33 47 32 37 16 94 29 53 71 44 65 25 43 91 52 97 51 14 70 11 33 28 77 73 17 78 39 68 17 57 91 71 52 38 17 14 91 43 58 50 27 29 48 63 66 04 68 89 53 67 30 73 16 69 87 40 31 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23 NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)Solutiona=[[75],[95,64],[17,47,82],[18,35,87,10],[20,4,82,47,65],[19,1,23,75,3,34],[88,2,77,73,7,63,67],[99,65,4,28,6,16,70,92],[41,41,26,56,83,40,80,70,33],[41,48,72,33,47,32,37,16,94,29],[53,71,44,65,25,43,91,52,97,51,14],[70,11,33,28,77,73,17,78,39,68,17,57],[91,71,52,38,17,14,91,43,58,50,27,29,48],[63,66,4,68,89,53,67,30,73,16,69,87,40,31],[4,62,98,27,23,9,70,98,73,93,38,53,60,4,23]]for x in range(len(a)-1,-1,-1):    for y in range(0,x):         a[x-1][y]+=max(a[x][y],a[x][y+1])print (a[0][0])Output1074",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.</p><p><strong>3</strong> <br /><strong>7</strong> 4 <br />2 <strong>4</strong> 6 <br />8 5 <strong>9</strong> 3 <br /></p><p>That is, 3 + 7 + 4 + 9 = 23.</p><p>Find the maximum total from top to bottom of the triangle below:</p><p>75 <br />95 64 <br />17 47 82 <br />18 35 87 10 <br />20 04 82 47 65 <br />19 01 23 75 03 34 <br />88 02 77 73 07 63 67 <br />99 65 04 28 06 16 70 92 <br />41 41 26 56 83 40 80 70 33 <br />41 48 72 33 47 32 37 16 94 29 <br />53 71 44 65 25 43 91 52 97 51 14 <br />70 11 33 28 77 73 17 78 39 68 17 57 <br />91 71 52 38 17 14 91 43 58 50 27 29 48 <br />63 66 04 68 89 53 67 30 73 16 69 87 40 31 <br />04 62 98 27 23 09 70 98 73 93 38 53 60 04 23 <br /></p><p>NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)</p><h3 id=\"solution\">Solution</h3><pre><code>a=[[75],[95,64],[17,47,82],[18,35,87,10],[20,4,82,47,65],[19,1,23,75,3,34],[88,2,77,73,7,63,67],[99,65,4,28,6,16,70,92],[41,41,26,56,83,40,80,70,33],[41,48,72,33,47,32,37,16,94,29],[53,71,44,65,25,43,91,52,97,51,14],[70,11,33,28,77,73,17,78,39,68,17,57],[91,71,52,38,17,14,91,43,58,50,27,29,48],[63,66,4,68,89,53,67,30,73,16,69,87,40,31],[4,62,98,27,23,9,70,98,73,93,38,53,60,4,23]]for x in range(len(a)-1,-1,-1):    for y in range(0,x):         a[x-1][y]+=max(a[x][y],a[x][y+1])print (a[0][0])</code></pre><p><strong>Output</strong></p><pre><code>1074</code></pre>",
            "url": "http://localhost:4000/problem-18",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-17",
            "title": "Number letter counts",
            "summary": null,
            "content_text": "Problem StatementIf the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of “and” when writing out numbers is in compliance with British usage.Solutionunits = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve' , 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']tens = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']other = ['hundred', 'thousand', 'and']result = 0for i in range (1, 1001):      unit = i% 10    ten = (i // 10)% 10    hundred = (i // 100)% 10    thousand = (i // 1000)% 10       if thousand != 0:        result += len (units [0]) + len (other [1])    if i% 1000 != 0:        if hundred != 0:            result += len (units [hundred-1]) + len (other [0])            if i% 100 != 0:                result += len (other [2])        if i% 100 != 0:            if ten &lt;2:                result += len (units [i% 100-1])            else:                result += len (tens [ten-2])                if unit != 0:                    result += len (units [unit-1])print (result)Output21124",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.</p><p>If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?</p><p><em>NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of “and” when writing out numbers is in compliance with British usage.</em></p><h3 id=\"solution\">Solution</h3><pre><code>units = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve' , 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']tens = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']other = ['hundred', 'thousand', 'and']result = 0for i in range (1, 1001):      unit = i% 10    ten = (i // 10)% 10    hundred = (i // 100)% 10    thousand = (i // 1000)% 10       if thousand != 0:        result += len (units [0]) + len (other [1])    if i% 1000 != 0:        if hundred != 0:            result += len (units [hundred-1]) + len (other [0])            if i% 100 != 0:                result += len (other [2])        if i% 100 != 0:            if ten &lt;2:                result += len (units [i% 100-1])            else:                result += len (tens [ten-2])                if unit != 0:                    result += len (units [unit-1])print (result)</code></pre><p><strong>Output</strong></p><pre><code>21124</code></pre>",
            "url": "http://localhost:4000/problem-17",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-16",
            "title": "Power digit sum",
            "summary": null,
            "content_text": "Problem Statement215 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.What is the sum of the digits of the number 21000?Solutiona = str(2**1000)lt=list(a)sum1=0for i in lt:    sum1=sum1+int(i)print(sum1)Output1366",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>2<sup>15</sup> = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.</p><p>What is the sum of the digits of the number 2<sup>1000</sup>?</p><h3 id=\"solution\">Solution</h3><pre><code>a = str(2**1000)lt=list(a)sum1=0for i in lt:    sum1=sum1+int(i)print(sum1)</code></pre><p><strong>Output</strong></p><pre><code>1366</code></pre>",
            "url": "http://localhost:4000/problem-16",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-15",
            "title": "Lattice paths",
            "summary": null,
            "content_text": "Problem StatementStarting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.How many such routes are there through a 20×20 grid?Solutiondef paths(n,k):    from math import factorial,sqrt    return int(factorial(n)/(factorial(k)*factorial(n-k)))print(paths(20+20,20))Output137846528820",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.</p><p><img src=\"/assets/images/p1.png\" alt=\"\" /></p><p>How many such routes are there through a 20×20 grid?</p><h3 id=\"solution\">Solution</h3><pre><code>def paths(n,k):    from math import factorial,sqrt    return int(factorial(n)/(factorial(k)*factorial(n-k)))print(paths(20+20,20))</code></pre><p><strong>Output</strong></p><pre><code>137846528820</code></pre>",
            "url": "http://localhost:4000/problem-15",
            
            
            
            
            
            "date_published": "2020-06-27T00:00:00+05:30",
            "date_modified": "2020-06-27T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-14",
            "title": "Longest Collatz sequence",
            "summary": null,
            "content_text": "Problem StatementThe following iterative sequence is defined for the set of positive integers:\\[n → n/2 \\ (n \\ is \\ even)\\\\ n → 3n + 1 \\ (n \\ is \\ odd)\\]Using the rule above and starting with 13, we generate the following sequence:\\[13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1\\]It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.Which starting number, under one million, produces the longest chain?NOTE: Once the chain starts the terms are allowed to go above one million.Solutionmax1=0val=0for i in range(2,10**6+1):    n=i    lt=[]    while n&gt;1:        if n%2==0:            n=n//2        else:            n=3*n+1        lt.append(n)        if len(lt)&gt;max1:        max1=len(lt)        val=iprint(val)Output837799",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The following iterative sequence is defined for the set of positive integers:</p>\\[n → n/2 \\ (n \\ is \\ even)\\\\ n → 3n + 1 \\ (n \\ is \\ odd)\\]<p>Using the rule above and starting with 13, we generate the following sequence:</p>\\[13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1\\]<p>It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.</p><p>Which starting number, under one million, produces the longest chain?</p><p><strong>NOTE: Once the chain starts the terms are allowed to go above one million.</strong></p><h3 id=\"solution\">Solution</h3><pre><code>max1=0val=0for i in range(2,10**6+1):    n=i    lt=[]    while n&gt;1:        if n%2==0:            n=n//2        else:            n=3*n+1        lt.append(n)        if len(lt)&gt;max1:        max1=len(lt)        val=iprint(val)</code></pre><p><strong>Output</strong></p><pre><code>837799</code></pre>",
            "url": "http://localhost:4000/problem-14",
            
            
            
            
            
            "date_published": "2020-06-27T00:00:00+05:30",
            "date_modified": "2020-06-27T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-13",
            "title": "Large Sum",
            "summary": null,
            "content_text": "Problem StatementWork out the first ten digits of the sum of the following one-hundred 50-digit numbers.37107287533902102798797998220837590246510135740250 46376937677490009712648124896970078050417018260538 74324986199524741059474233309513058123726617309629 91942213363574161572522430563301811072406154908250 23067588207539346171171980310421047513778063246676 89261670696623633820136378418383684178734361726757 28112879812849979408065481931592621691275889832738 44274228917432520321923589422876796487670272189318 47451445736001306439091167216856844588711603153276 70386486105843025439939619828917593665686757934951 62176457141856560629502157223196586755079324193331 64906352462741904929101432445813822663347944758178 92575867718337217661963751590579239728245598838407 58203565325359399008402633568948830189458628227828 58203565325359399008402633568948830189458628227828 80181199384826282014278194139940567587151170094390 35398664372827112653829987240784473053190104293586 86515506006295864861532075273371959191420517255829 71693888707715466499115593487603532921714970056938 54370070576826684624621495650076471787294438377604 53282654108756828443191190634694037855217779295145 36123272525000296071075082563815656710885258350721 45876576172410976447339110607218265236877223636045 17423706905851860660448207621209813287860733969412 81142660418086830619328460811191061556940512689692 51934325451728388641918047049293215058642563049483 62467221648435076201727918039944693004732956340691 15732444386908125794514089057706229429197107928209 55037687525678773091862540744969844508330393682126 18336384825330154686196124348767681297534375946515 80386287592878490201521685554828717201219257766954 78182833757993103614740356856449095527097864797581 16726320100436897842553539920931837441497806860984 48403098129077791799088218795327364475675590848030 87086987551392711854517078544161852424320693150332 59959406895756536782107074926966537676326235447210 69793950679652694742597709739166693763042633987085 41052684708299085211399427365734116182760315001271 65378607361501080857009149939512557028198746004375 35829035317434717326932123578154982629742552737307 94953759765105305946966067683156574377167401875275 88902802571733229619176668713819931811048770190271 25267680276078003013678680992525463401061632866526 36270218540497705585629946580636237993140746255962 24074486908231174977792365466257246923322810917141 91430288197103288597806669760892938638285025333403 34413065578016127815921815005561868836468420090470 23053081172816430487623791969842487255036638784583 11487696932154902810424020138335124462181441773470 63783299490636259666498587618221225225512486764533 67720186971698544312419572409913959008952310058822 95548255300263520781532296796249481641953868218774 76085327132285723110424803456124867697064507995236 37774242535411291684276865538926205024910326572967 23701913275725675285653248258265463092207058596522 29798860272258331913126375147341994889534765745501 18495701454879288984856827726077713721403798879715 38298203783031473527721580348144513491373226651381 34829543829199918180278916522431027392251122869539 40957953066405232632538044100059654939159879593635 29746152185502371307642255121183693803580388584903 41698116222072977186158236678424689157993532961922 62467957194401269043877107275048102390895523597457 23189706772547915061505504953922979530901129967519 86188088225875314529584099251203829009407770775672 11306739708304724483816533873502340845647058077308 82959174767140363198008187129011875491310547126581 97623331044818386269515456334926366572897563400500 42846280183517070527831839425882145521227251250327 55121603546981200581762165212827652751691296897789 32238195734329339946437501907836945765883352399886 75506164965184775180738168837861091527357929701337 62177842752192623401942399639168044983993173312731 32924185707147349566916674687634660915035914677504 99518671430235219628894890102423325116913619626622 73267460800591547471830798392868535206946944540724 76841822524674417161514036427982273348055556214818 97142617910342598647204516893989422179826088076852 87783646182799346313767754307809363333018982642090 10848802521674670883215120185883543223812876952786 71329612474782464538636993009049310363619763878039 62184073572399794223406235393808339651327408011116 66627891981488087797941876876144230030984490851411 60661826293682836764744779239180335110989069790714 85786944089552990653640447425576083659976645795096 66024396409905389607120198219976047599490197230297 64913982680032973156037120041377903785566085089252 16730939319872750275468906903707539413042652315011 94809377245048795150954100921645863754710598436791 78639167021187492431995700641917969777599028300699 15368713711936614952811305876380278410754449733078 40789923115535562561142322423255033685442488917353 44889911501440648020369068063960672322193204149535 41503128880339536053299340368006977710650566631954 81234880673210146739058568557934581403627822703280 82616570773948327592232845941706525094512325230608 22918802058777319719839450180888072429661980811197 77158542502016545090413245809786882778948721859617 72107838435069186155435662884062257473692284509516 20849603980134001723930671666823555245252804609722 53503534226472524250874054075591789781264330331690 Solutiona = [37107287533902102798797998220837590246510135740250,46376937677490009712648124896970078050417018260538,74324986199524741059474233309513058123726617309629,91942213363574161572522430563301811072406154908250,23067588207539346171171980310421047513778063246676,89261670696623633820136378418383684178734361726757,28112879812849979408065481931592621691275889832738,44274228917432520321923589422876796487670272189318,47451445736001306439091167216856844588711603153276,70386486105843025439939619828917593665686757934951,62176457141856560629502157223196586755079324193331,64906352462741904929101432445813822663347944758178,92575867718337217661963751590579239728245598838407,58203565325359399008402633568948830189458628227828,80181199384826282014278194139940567587151170094390,35398664372827112653829987240784473053190104293586,86515506006295864861532075273371959191420517255829,71693888707715466499115593487603532921714970056938,54370070576826684624621495650076471787294438377604,53282654108756828443191190634694037855217779295145,36123272525000296071075082563815656710885258350721,45876576172410976447339110607218265236877223636045,17423706905851860660448207621209813287860733969412,81142660418086830619328460811191061556940512689692,51934325451728388641918047049293215058642563049483,62467221648435076201727918039944693004732956340691,15732444386908125794514089057706229429197107928209,55037687525678773091862540744969844508330393682126,18336384825330154686196124348767681297534375946515,80386287592878490201521685554828717201219257766954,78182833757993103614740356856449095527097864797581,16726320100436897842553539920931837441497806860984,48403098129077791799088218795327364475675590848030,87086987551392711854517078544161852424320693150332,59959406895756536782107074926966537676326235447210,69793950679652694742597709739166693763042633987085,41052684708299085211399427365734116182760315001271,65378607361501080857009149939512557028198746004375,35829035317434717326932123578154982629742552737307,94953759765105305946966067683156574377167401875275,88902802571733229619176668713819931811048770190271,25267680276078003013678680992525463401061632866526,36270218540497705585629946580636237993140746255962,24074486908231174977792365466257246923322810917141,91430288197103288597806669760892938638285025333403,34413065578016127815921815005561868836468420090470,23053081172816430487623791969842487255036638784583,11487696932154902810424020138335124462181441773470,63783299490636259666498587618221225225512486764533,67720186971698544312419572409913959008952310058822,95548255300263520781532296796249481641953868218774,76085327132285723110424803456124867697064507995236,37774242535411291684276865538926205024910326572967,23701913275725675285653248258265463092207058596522,29798860272258331913126375147341994889534765745501,18495701454879288984856827726077713721403798879715,38298203783031473527721580348144513491373226651381,34829543829199918180278916522431027392251122869539,40957953066405232632538044100059654939159879593635,29746152185502371307642255121183693803580388584903,41698116222072977186158236678424689157993532961922,62467957194401269043877107275048102390895523597457,23189706772547915061505504953922979530901129967519,86188088225875314529584099251203829009407770775672,11306739708304724483816533873502340845647058077308,82959174767140363198008187129011875491310547126581,97623331044818386269515456334926366572897563400500,42846280183517070527831839425882145521227251250327,55121603546981200581762165212827652751691296897789,32238195734329339946437501907836945765883352399886,75506164965184775180738168837861091527357929701337,62177842752192623401942399639168044983993173312731,32924185707147349566916674687634660915035914677504,99518671430235219628894890102423325116913619626622,73267460800591547471830798392868535206946944540724,76841822524674417161514036427982273348055556214818,97142617910342598647204516893989422179826088076852,87783646182799346313767754307809363333018982642090,10848802521674670883215120185883543223812876952786,71329612474782464538636993009049310363619763878039,62184073572399794223406235393808339651327408011116,66627891981488087797941876876144230030984490851411,60661826293682836764744779239180335110989069790714,85786944089552990653640447425576083659976645795096,66024396409905389607120198219976047599490197230297,64913982680032973156037120041377903785566085089252,16730939319872750275468906903707539413042652315011,94809377245048795150954100921645863754710598436791,78639167021187492431995700641917969777599028300699,15368713711936614952811305876380278410754449733078,40789923115535562561142322423255033685442488917353,44889911501440648020369068063960672322193204149535,41503128880339536053299340368006977710650566631954,81234880673210146739058568557934581403627822703280,82616570773948327592232845941706525094512325230608,22918802058777319719839450180888072429661980811197,77158542502016545090413245809786882778948721859617,72107838435069186155435662884062257473692284509516,20849603980134001723930671666823555245252804609722,53503534226472524250874054075591789781264330331690]print(str(sum(a))[:10])Output5537376230",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.</p><p>37107287533902102798797998220837590246510135740250 <br />46376937677490009712648124896970078050417018260538 <br />74324986199524741059474233309513058123726617309629 <br />91942213363574161572522430563301811072406154908250 <br />23067588207539346171171980310421047513778063246676 <br />89261670696623633820136378418383684178734361726757 <br />28112879812849979408065481931592621691275889832738 <br />44274228917432520321923589422876796487670272189318 <br />47451445736001306439091167216856844588711603153276 <br />70386486105843025439939619828917593665686757934951 <br />62176457141856560629502157223196586755079324193331 <br />64906352462741904929101432445813822663347944758178 <br />92575867718337217661963751590579239728245598838407 <br />58203565325359399008402633568948830189458628227828 <br />58203565325359399008402633568948830189458628227828 <br />80181199384826282014278194139940567587151170094390 <br />35398664372827112653829987240784473053190104293586 <br />86515506006295864861532075273371959191420517255829 <br />71693888707715466499115593487603532921714970056938 <br />54370070576826684624621495650076471787294438377604 <br />53282654108756828443191190634694037855217779295145 <br />36123272525000296071075082563815656710885258350721 <br />45876576172410976447339110607218265236877223636045 <br />17423706905851860660448207621209813287860733969412 <br />81142660418086830619328460811191061556940512689692 <br />51934325451728388641918047049293215058642563049483 <br />62467221648435076201727918039944693004732956340691 <br />15732444386908125794514089057706229429197107928209 <br />55037687525678773091862540744969844508330393682126 <br />18336384825330154686196124348767681297534375946515 <br />80386287592878490201521685554828717201219257766954 <br />78182833757993103614740356856449095527097864797581 <br />16726320100436897842553539920931837441497806860984 <br />48403098129077791799088218795327364475675590848030 <br />87086987551392711854517078544161852424320693150332 <br />59959406895756536782107074926966537676326235447210 <br />69793950679652694742597709739166693763042633987085 <br />41052684708299085211399427365734116182760315001271 <br />65378607361501080857009149939512557028198746004375 <br />35829035317434717326932123578154982629742552737307 <br />94953759765105305946966067683156574377167401875275 <br />88902802571733229619176668713819931811048770190271 <br />25267680276078003013678680992525463401061632866526 <br />36270218540497705585629946580636237993140746255962 <br />24074486908231174977792365466257246923322810917141 <br />91430288197103288597806669760892938638285025333403 <br />34413065578016127815921815005561868836468420090470 <br />23053081172816430487623791969842487255036638784583 <br />11487696932154902810424020138335124462181441773470 <br />63783299490636259666498587618221225225512486764533 <br />67720186971698544312419572409913959008952310058822 <br />95548255300263520781532296796249481641953868218774 <br />76085327132285723110424803456124867697064507995236 <br />37774242535411291684276865538926205024910326572967 <br />23701913275725675285653248258265463092207058596522 <br />29798860272258331913126375147341994889534765745501 <br />18495701454879288984856827726077713721403798879715 <br />38298203783031473527721580348144513491373226651381 <br />34829543829199918180278916522431027392251122869539 <br />40957953066405232632538044100059654939159879593635 <br />29746152185502371307642255121183693803580388584903 <br />41698116222072977186158236678424689157993532961922 <br />62467957194401269043877107275048102390895523597457 <br />23189706772547915061505504953922979530901129967519 <br />86188088225875314529584099251203829009407770775672 <br />11306739708304724483816533873502340845647058077308 <br />82959174767140363198008187129011875491310547126581 <br />97623331044818386269515456334926366572897563400500 <br />42846280183517070527831839425882145521227251250327 <br />55121603546981200581762165212827652751691296897789 <br />32238195734329339946437501907836945765883352399886 <br />75506164965184775180738168837861091527357929701337 <br />62177842752192623401942399639168044983993173312731 <br />32924185707147349566916674687634660915035914677504 <br />99518671430235219628894890102423325116913619626622 <br />73267460800591547471830798392868535206946944540724 <br />76841822524674417161514036427982273348055556214818 <br />97142617910342598647204516893989422179826088076852 <br />87783646182799346313767754307809363333018982642090 <br />10848802521674670883215120185883543223812876952786 <br />71329612474782464538636993009049310363619763878039 <br />62184073572399794223406235393808339651327408011116 <br />66627891981488087797941876876144230030984490851411 <br />60661826293682836764744779239180335110989069790714 <br />85786944089552990653640447425576083659976645795096 <br />66024396409905389607120198219976047599490197230297 <br />64913982680032973156037120041377903785566085089252 <br />16730939319872750275468906903707539413042652315011 <br />94809377245048795150954100921645863754710598436791 <br />78639167021187492431995700641917969777599028300699 <br />15368713711936614952811305876380278410754449733078 <br />40789923115535562561142322423255033685442488917353 <br />44889911501440648020369068063960672322193204149535 <br />41503128880339536053299340368006977710650566631954 <br />81234880673210146739058568557934581403627822703280 <br />82616570773948327592232845941706525094512325230608 <br />22918802058777319719839450180888072429661980811197 <br />77158542502016545090413245809786882778948721859617 <br />72107838435069186155435662884062257473692284509516 <br />20849603980134001723930671666823555245252804609722 <br />53503534226472524250874054075591789781264330331690 <br /></p><h3 id=\"solution\">Solution</h3><pre><code>a = [37107287533902102798797998220837590246510135740250,46376937677490009712648124896970078050417018260538,74324986199524741059474233309513058123726617309629,91942213363574161572522430563301811072406154908250,23067588207539346171171980310421047513778063246676,89261670696623633820136378418383684178734361726757,28112879812849979408065481931592621691275889832738,44274228917432520321923589422876796487670272189318,47451445736001306439091167216856844588711603153276,70386486105843025439939619828917593665686757934951,62176457141856560629502157223196586755079324193331,64906352462741904929101432445813822663347944758178,92575867718337217661963751590579239728245598838407,58203565325359399008402633568948830189458628227828,80181199384826282014278194139940567587151170094390,35398664372827112653829987240784473053190104293586,86515506006295864861532075273371959191420517255829,71693888707715466499115593487603532921714970056938,54370070576826684624621495650076471787294438377604,53282654108756828443191190634694037855217779295145,36123272525000296071075082563815656710885258350721,45876576172410976447339110607218265236877223636045,17423706905851860660448207621209813287860733969412,81142660418086830619328460811191061556940512689692,51934325451728388641918047049293215058642563049483,62467221648435076201727918039944693004732956340691,15732444386908125794514089057706229429197107928209,55037687525678773091862540744969844508330393682126,18336384825330154686196124348767681297534375946515,80386287592878490201521685554828717201219257766954,78182833757993103614740356856449095527097864797581,16726320100436897842553539920931837441497806860984,48403098129077791799088218795327364475675590848030,87086987551392711854517078544161852424320693150332,59959406895756536782107074926966537676326235447210,69793950679652694742597709739166693763042633987085,41052684708299085211399427365734116182760315001271,65378607361501080857009149939512557028198746004375,35829035317434717326932123578154982629742552737307,94953759765105305946966067683156574377167401875275,88902802571733229619176668713819931811048770190271,25267680276078003013678680992525463401061632866526,36270218540497705585629946580636237993140746255962,24074486908231174977792365466257246923322810917141,91430288197103288597806669760892938638285025333403,34413065578016127815921815005561868836468420090470,23053081172816430487623791969842487255036638784583,11487696932154902810424020138335124462181441773470,63783299490636259666498587618221225225512486764533,67720186971698544312419572409913959008952310058822,95548255300263520781532296796249481641953868218774,76085327132285723110424803456124867697064507995236,37774242535411291684276865538926205024910326572967,23701913275725675285653248258265463092207058596522,29798860272258331913126375147341994889534765745501,18495701454879288984856827726077713721403798879715,38298203783031473527721580348144513491373226651381,34829543829199918180278916522431027392251122869539,40957953066405232632538044100059654939159879593635,29746152185502371307642255121183693803580388584903,41698116222072977186158236678424689157993532961922,62467957194401269043877107275048102390895523597457,23189706772547915061505504953922979530901129967519,86188088225875314529584099251203829009407770775672,11306739708304724483816533873502340845647058077308,82959174767140363198008187129011875491310547126581,97623331044818386269515456334926366572897563400500,42846280183517070527831839425882145521227251250327,55121603546981200581762165212827652751691296897789,32238195734329339946437501907836945765883352399886,75506164965184775180738168837861091527357929701337,62177842752192623401942399639168044983993173312731,32924185707147349566916674687634660915035914677504,99518671430235219628894890102423325116913619626622,73267460800591547471830798392868535206946944540724,76841822524674417161514036427982273348055556214818,97142617910342598647204516893989422179826088076852,87783646182799346313767754307809363333018982642090,10848802521674670883215120185883543223812876952786,71329612474782464538636993009049310363619763878039,62184073572399794223406235393808339651327408011116,66627891981488087797941876876144230030984490851411,60661826293682836764744779239180335110989069790714,85786944089552990653640447425576083659976645795096,66024396409905389607120198219976047599490197230297,64913982680032973156037120041377903785566085089252,16730939319872750275468906903707539413042652315011,94809377245048795150954100921645863754710598436791,78639167021187492431995700641917969777599028300699,15368713711936614952811305876380278410754449733078,40789923115535562561142322423255033685442488917353,44889911501440648020369068063960672322193204149535,41503128880339536053299340368006977710650566631954,81234880673210146739058568557934581403627822703280,82616570773948327592232845941706525094512325230608,22918802058777319719839450180888072429661980811197,77158542502016545090413245809786882778948721859617,72107838435069186155435662884062257473692284509516,20849603980134001723930671666823555245252804609722,53503534226472524250874054075591789781264330331690]print(str(sum(a))[:10])</code></pre><p><strong>Output</strong></p><pre><code>5537376230</code></pre>",
            "url": "http://localhost:4000/problem-13",
            
            
            
            
            
            "date_published": "2020-06-27T00:00:00+05:30",
            "date_modified": "2020-06-27T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-12",
            "title": "Highly divisible triangular number",
            "summary": null,
            "content_text": "Problem StatementThe sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\\[1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\\]Let us list the factors of the first seven triangle numbers:1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28: 1,2,4,7,14,28 We can see that 28 is the first triangle number to have over five divisors.What is the value of the first triangle number to have over five hundred divisors?Solutioni=1lt=[]nd=0div=dict()def factors(x):    result = []    i = 1    while i*i &lt;= x:        if x % i == 0:            result.append(i)            if x//i != i:                 result.append(x//i)        i += 1    return resultbol=Truewhile bol:    lt.append(i)    su=sum(lt)    if(len(factors(su))&gt;500):        print(su)        bol=False        break    i=i+1Output76576500",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:</p>\\[1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\\]<p>Let us list the factors of the first seven triangle numbers:</p><p>1: 1 <br />3: 1,3 <br />6: 1,2,3,6 <br />10: 1,2,5,10 <br />15: 1,3,5,15 <br />21: 1,3,7,21 <br />28: 1,2,4,7,14,28 <br /></p><p>We can see that 28 is the first triangle number to have over five divisors.</p><p>What is the value of the first triangle number to have over five hundred divisors?</p><h3 id=\"solution\">Solution</h3><pre><code>i=1lt=[]nd=0div=dict()def factors(x):    result = []    i = 1    while i*i &lt;= x:        if x % i == 0:            result.append(i)            if x//i != i:                 result.append(x//i)        i += 1    return resultbol=Truewhile bol:    lt.append(i)    su=sum(lt)    if(len(factors(su))&gt;500):        print(su)        bol=False        break    i=i+1</code></pre><p><strong>Output</strong></p><pre><code>76576500</code></pre>",
            "url": "http://localhost:4000/problem-12",
            
            
            
            
            
            "date_published": "2020-06-27T00:00:00+05:30",
            "date_modified": "2020-06-27T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-11",
            "title": "Largest Product on Grid",
            "summary": null,
            "content_text": "Problem StatementIn the 20×20 grid below, four numbers along a diagonal line have been marked in red.08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65  52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80  24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50  32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70  67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21  24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72  21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95  78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92  16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57  86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58  19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40  04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66  88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69  04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16  20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54  01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48 The product of these numbers is 26 × 63 × 78 × 14 = 1788696.What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?Solutionarr = [    [8, 2, 22, 97, 38, 15, 00, 40, 00, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],    [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 00],    [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],    [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],    [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],    [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],    [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],    [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],    [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],    [21, 36, 23, 9, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95],    [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],    [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57],    [86, 56, 00, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],    [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],    [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],    [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],    [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],    [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],    [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],    [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]];def biggest_product():    grid = arr    product = 0    product_temp = 0    col = 20    row = 20    for i in range(row):        for j in range(col):            if i + 3 &lt; 20:                product_temp = grid[i][j] * grid[i + 1][j] * grid[i + 2][j] * grid[i + 3][j]                if product &lt; product_temp:                    product = product_temp            if j + 3 &lt; 20:                product_temp = grid[i][j] * grid[i][j + 1] * grid[i][j + 2] * grid[i][j + 3]                if product &lt; product_temp:                    product = product_temp            if i + 3 &lt; 20 and j + 3 &lt; 20:                product_temp = grid[i][j] * grid[i + 1][j + 1] * grid[i + 2][j + 2] * grid[i + 3][j + 3]                if product &lt; product_temp:                    product = product_temp    for i in range(20, -1, -1):        for j in range(20):            if i + 3 &lt; 20 and j - 3 &gt;= 0:                product_temp = grid[i][j] * grid[i + 1][j - 1] * grid[i + 2][j - 2] * grid[i + 3][j - 3]                if product &lt; product_temp:                    product = product_temp    return productprint(biggest_product())Output70600674",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>In the 20×20 grid below, four numbers along a diagonal line have been marked in red.</p><p>08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 <br /> 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 <br /> 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 <br /> 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 <br /> 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 <br /> 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 <br /> 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 <br /> 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 <br /> 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 <br /> 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 <br /> 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 <br /> 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 <br /> 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 <br /> 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 <br /> 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 <br /> 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 <br /> 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 <br /> 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 <br /> 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 <br /> 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48 <br /></p><p>The product of these numbers is 26 × 63 × 78 × 14 = 1788696.</p><p>What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?</p><h3 id=\"solution\">Solution</h3><pre><code>arr = [    [8, 2, 22, 97, 38, 15, 00, 40, 00, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],    [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 00],    [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],    [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],    [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],    [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],    [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],    [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],    [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],    [21, 36, 23, 9, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95],    [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],    [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57],    [86, 56, 00, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],    [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],    [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],    [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],    [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],    [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],    [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],    [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]];def biggest_product():    grid = arr    product = 0    product_temp = 0    col = 20    row = 20    for i in range(row):        for j in range(col):            if i + 3 &lt; 20:                product_temp = grid[i][j] * grid[i + 1][j] * grid[i + 2][j] * grid[i + 3][j]                if product &lt; product_temp:                    product = product_temp            if j + 3 &lt; 20:                product_temp = grid[i][j] * grid[i][j + 1] * grid[i][j + 2] * grid[i][j + 3]                if product &lt; product_temp:                    product = product_temp            if i + 3 &lt; 20 and j + 3 &lt; 20:                product_temp = grid[i][j] * grid[i + 1][j + 1] * grid[i + 2][j + 2] * grid[i + 3][j + 3]                if product &lt; product_temp:                    product = product_temp    for i in range(20, -1, -1):        for j in range(20):            if i + 3 &lt; 20 and j - 3 &gt;= 0:                product_temp = grid[i][j] * grid[i + 1][j - 1] * grid[i + 2][j - 2] * grid[i + 3][j - 3]                if product &lt; product_temp:                    product = product_temp    return productprint(biggest_product())</code></pre><p><strong>Output</strong></p><pre><code>70600674</code></pre>",
            "url": "http://localhost:4000/problem-11",
            
            
            
            
            
            "date_published": "2020-06-27T00:00:00+05:30",
            "date_modified": "2020-06-27T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        }
    
    ]
}