{
    "version": "https://jsonfeed.org/version/1",
    "title": "Euler Decode",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": null,
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Ayan Bag",
        "url": "https://ayanbag.com",
        "avatar": null
    },
    
"items": [
    
        {
            "id": "http://localhost:4000/problem-59",
            "title": "XOR decryption",
            "summary": null,
            "content_text": "Problem StatementEach character on a computer is assigned a unique code and the preferred standard is ASCII (American Standard Code for Information Interchange). For example, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.A modern encryption method is to take a text file, convert the bytes to ASCII, then XOR each byte with a given value, taken from a secret key. The advantage with the XOR function is that using the same encryption key on the cipher text, restores the plain text; for example, 65 XOR 42 = 107, then 107 XOR 42 = 65.For unbreakable encryption, the key is the same length as the plain text message, and the key is made up of random bytes. The user would keep the encrypted message and the encryption key in different locations, and without both “halves”, it is impossible to decrypt the message.Unfortunately, this method is impractical for most users, so the modified method is to use a password as a key. If the password is shorter than the message, which is likely, the key is repeated cyclically throughout the message. The balance for this method is using a sufficiently long password key for security, but short enough to be memorable.Your task has been made easy, as the encryption key consists of three lower case characters. Using p059_cipher.txt, a file containing the encrypted ASCII codes, and the knowledge that the plain text must contain common English words, decrypt the message and find the sum of the ASCII values in the original text.Solutionfrom collections import Counterf = open('cipher.txt')encoded_text = f.read().strip().split(',')encoded_text = [int(x) for x in encoded_text]key = [Counter(encoded_text[i::3]).most_common(1)[0][0] ^ 32 for i in range(3)]print (sum(x^y for x, y in zip(encoded_text, key*(len(encoded_text)//3+1))))Output129448",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Each character on a computer is assigned a unique code and the preferred standard is ASCII (American Standard Code for Information Interchange). For example, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.</p><p>A modern encryption method is to take a text file, convert the bytes to ASCII, then XOR each byte with a given value, taken from a secret key. The advantage with the XOR function is that using the same encryption key on the cipher text, restores the plain text; for example, 65 XOR 42 = 107, then 107 XOR 42 = 65.</p><p>For unbreakable encryption, the key is the same length as the plain text message, and the key is made up of random bytes. The user would keep the encrypted message and the encryption key in different locations, and without both “halves”, it is impossible to decrypt the message.</p><p>Unfortunately, this method is impractical for most users, so the modified method is to use a password as a key. If the password is shorter than the message, which is likely, the key is repeated cyclically throughout the message. The balance for this method is using a sufficiently long password key for security, but short enough to be memorable.</p><p>Your task has been made easy, as the encryption key consists of three lower case characters. Using <a href=\"https://projecteuler.net/project/resources/p059_cipher.txt\">p059_cipher.txt</a>, a file containing the encrypted ASCII codes, and the knowledge that the plain text must contain common English words, decrypt the message and find the sum of the ASCII values in the original text.</p><h3 id=\"solution\">Solution</h3><pre><code>from collections import Counterf = open('cipher.txt')encoded_text = f.read().strip().split(',')encoded_text = [int(x) for x in encoded_text]key = [Counter(encoded_text[i::3]).most_common(1)[0][0] ^ 32 for i in range(3)]print (sum(x^y for x, y in zip(encoded_text, key*(len(encoded_text)//3+1))))</code></pre><p><strong>Output</strong></p><pre><code>129448</code></pre>",
            "url": "http://localhost:4000/problem-59",
            
            
            
            
            
            "date_published": "2020-08-10T00:00:00+05:30",
            "date_modified": "2020-08-10T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-58",
            "title": "Spiral primes",
            "summary": null,
            "content_text": "Problem StatementStarting with 1 and spiralling anticlockwise in the following way, a square spiral with side length 7 is formed.37 36 35 34 33 32 31 38 17 16 15 14 13 30 39 18  5  4  3 12 29 40 19  6  1  2 11 28 41 20  7  8  9 10 27 42 21 22 23 24 25 26 43 44 45 46 47 48 49 It is interesting to note that the odd squares lie along the bottom right diagonal, but what is more interesting is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8/13 ≈ 62%.If one complete new layer is wrapped around the spiral above, a square spiral with side length 9 will be formed. If this process is continued, what is the side length of the square spiral for which the ratio of primes along both diagonals first falls below 10%?Solutiondef is_prime(n):    for i in range(3, int(n**0.5)+1, 2):        if n % i == 0:            return False    return Truei = 0gap = 1ratio = 1primes = []all_numbers = [1]while ratio &gt; 0.1:    for j in range(4):        i += gap        present_number = 2*i + 1        all_numbers.append(present_number)        if is_prime(present_number):            primes.append(2*i + 1)    ratio = float(len(primes))/len(all_numbers)    gap += 1print (int((2*i+1)**0.5))Output26241",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Starting with 1 and spiralling anticlockwise in the following way, a square spiral with side length 7 is formed.</p><p><strong>37</strong> 36 35 34 33 32 <strong>31</strong> <br />38 <strong>17</strong> 16 15 14 <strong>13</strong> 30 <br />39 18  <strong>5</strong>  4  <strong>3</strong> 12 29 <br />40 19  6  1  2 11 28 <br />41 20  <strong>7</strong>  8  9 10 27 <br />42 21 22 23 24 25 26 <br /><strong>43</strong> 44 45 46 47 48 49 <br /></p><p>It is interesting to note that the odd squares lie along the bottom right diagonal, but what is more interesting is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8/13 ≈ 62%.</p><p>If one complete new layer is wrapped around the spiral above, a square spiral with side length 9 will be formed. If this process is continued, what is the side length of the square spiral for which the ratio of primes along both diagonals first falls below 10%?</p><h3 id=\"solution\">Solution</h3><pre><code>def is_prime(n):    for i in range(3, int(n**0.5)+1, 2):        if n % i == 0:            return False    return Truei = 0gap = 1ratio = 1primes = []all_numbers = [1]while ratio &gt; 0.1:    for j in range(4):        i += gap        present_number = 2*i + 1        all_numbers.append(present_number)        if is_prime(present_number):            primes.append(2*i + 1)    ratio = float(len(primes))/len(all_numbers)    gap += 1print (int((2*i+1)**0.5))</code></pre><p><strong>Output</strong></p><pre><code>26241</code></pre>",
            "url": "http://localhost:4000/problem-58",
            
            
            
            
            
            "date_published": "2020-08-10T00:00:00+05:30",
            "date_modified": "2020-08-10T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-57",
            "title": "Square root convergents",
            "summary": null,
            "content_text": "Problem StatementIt is possible to show that the square root of two can be expressed as an infinite continued fraction.\\[\\sqrt 2 =1+ \\frac 1 {2+ \\frac 1 {2 +\\frac 1 {2+ \\dots}}}\\]By expanding this for the first four iterations, we get:\\[1 + \\frac 1 2 = \\frac  32 = 1.5 \\\\1 + \\frac 1 {2 + \\frac 1 2} = \\frac 7 5 = 1.4 \\\\1 + \\frac 1 {2 + \\frac 1 {2+\\frac 1 2}} = \\frac {17}{12} = 1.41666 \\dots \\\\1 + \\frac 1 {2 + \\frac 1 {2+\\frac 1 {2+\\frac 1 2}}} = \\frac {41}{29} = 1.41379 \\dots \\\\\\]The next three expansions are $\\frac {99}{70}$, $\\frac {239}{169}$ and $\\frac {577}{408}$ but the eighth expansion, $\\frac {1393}{985}$, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator.In the first one-thousand expansions, how many fractions contain a numerator with more digits than the denominator?Solutionimport math as mtn=3d=2count =0for i in range(2,1001):    n,d = 2*d+n,n+d    if int(mt.log10(n)) &gt; int(mt.log10(d)): count += 1print(count)Output153",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>It is possible to show that the square root of two can be expressed as an infinite continued fraction.</p>\\[\\sqrt 2 =1+ \\frac 1 {2+ \\frac 1 {2 +\\frac 1 {2+ \\dots}}}\\]<p>By expanding this for the first four iterations, we get:</p>\\[1 + \\frac 1 2 = \\frac  32 = 1.5 \\\\1 + \\frac 1 {2 + \\frac 1 2} = \\frac 7 5 = 1.4 \\\\1 + \\frac 1 {2 + \\frac 1 {2+\\frac 1 2}} = \\frac {17}{12} = 1.41666 \\dots \\\\1 + \\frac 1 {2 + \\frac 1 {2+\\frac 1 {2+\\frac 1 2}}} = \\frac {41}{29} = 1.41379 \\dots \\\\\\]<p>The next three expansions are $\\frac {99}{70}$, $\\frac {239}{169}$ and $\\frac {577}{408}$ but the eighth expansion, $\\frac {1393}{985}$, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator.</p><p>In the first one-thousand expansions, how many fractions contain a numerator with more digits than the denominator?</p><h3 id=\"solution\">Solution</h3><pre><code>import math as mtn=3d=2count =0for i in range(2,1001):    n,d = 2*d+n,n+d    if int(mt.log10(n)) &gt; int(mt.log10(d)): count += 1print(count)</code></pre><p><strong>Output</strong></p><pre><code>153</code></pre>",
            "url": "http://localhost:4000/problem-57",
            
            
            
            
            
            "date_published": "2020-08-10T00:00:00+05:30",
            "date_modified": "2020-08-10T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-56",
            "title": "Powerful digit sum",
            "summary": null,
            "content_text": "Problem StatementA googol (10100) is a massive number: one followed by one-hundred zeros; 100100 is almost unimaginably large: one followed by two-hundred zeros. Despite their size, the sum of the digits in each number is only 1.Considering natural numbers of the form, ab, where a, b &lt; 100, what is the maximum digital sum?Solutiondigi_sum=[]for a in range(1,101):    for b in range(1,101):        add=[]        val = list(str(a**b))        for i in val:            add.append(int(i))        digi_sum.append(sum(add))res = sorted(digi_sum)print(res[-1])Output972",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>A googol (10<sup>100</sup>) is a massive number: one followed by one-hundred zeros; 100<sup>100</sup> is almost unimaginably large: one followed by two-hundred zeros. Despite their size, the sum of the digits in each number is only 1.</p><p>Considering natural numbers of the form, a<sup>b</sup>, where a, b &lt; 100, what is the maximum digital sum?</p><h3 id=\"solution\">Solution</h3><pre><code>digi_sum=[]for a in range(1,101):    for b in range(1,101):        add=[]        val = list(str(a**b))        for i in val:            add.append(int(i))        digi_sum.append(sum(add))res = sorted(digi_sum)print(res[-1])</code></pre><p><strong>Output</strong></p><pre><code>972</code></pre>",
            "url": "http://localhost:4000/problem-56",
            
            
            
            
            
            "date_published": "2020-08-10T00:00:00+05:30",
            "date_modified": "2020-08-10T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-55",
            "title": "Lychrel numbers",
            "summary": null,
            "content_text": "Problem StatementIf we take 47, reverse and add, 47 + 74 = 121, which is palindromic.Not all numbers produce palindromes so quickly. For example,349 + 943 = 1292, 1292 + 2921 = 4213 4213 + 3124 = 7337 That is, 349 took three iterations to arrive at a palindrome. Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.How many Lychrel numbers are there below ten-thousand?Solutiondef palin(n):    return str(n) == str(n)[::-1]lychrel = []for num in range(10,10001):    iteration = 1    st_num = str(num)    temp = int(st_num[::-1]) + num    if palin(temp):            continue    else:        while iteration&lt;=50:            temp1=str(temp)            temp2=temp1[::-1]            temp3 = int(temp1)+int(temp2)            if palin(temp3):                break            else:                temp = temp3                iteration = iteration+1        if iteration &gt;50:            lychrel.append(temp3)print(len(lychrel))Output249",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.</p><p>Not all numbers produce palindromes so quickly. For example,</p><p>349 + 943 = 1292, <br />1292 + 2921 = 4213 <br />4213 + 3124 = 7337 <br /></p><p>That is, 349 took three iterations to arrive at a palindrome. <br /></p><p>Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).</p><p>Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.</p><p>How many Lychrel numbers are there below ten-thousand?</p><h3 id=\"solution\">Solution</h3><pre><code>def palin(n):    return str(n) == str(n)[::-1]lychrel = []for num in range(10,10001):    iteration = 1    st_num = str(num)    temp = int(st_num[::-1]) + num    if palin(temp):            continue    else:        while iteration&lt;=50:            temp1=str(temp)            temp2=temp1[::-1]            temp3 = int(temp1)+int(temp2)            if palin(temp3):                break            else:                temp = temp3                iteration = iteration+1        if iteration &gt;50:            lychrel.append(temp3)print(len(lychrel))</code></pre><p><strong>Output</strong></p><pre><code>249</code></pre>",
            "url": "http://localhost:4000/problem-55",
            
            
            
            
            
            "date_published": "2020-08-10T00:00:00+05:30",
            "date_modified": "2020-08-10T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-53",
            "title": "Combinatoric selections",
            "summary": null,
            "content_text": "Problem StatementThere are exactly ten ways of selecting three from five, 12345:123, 124, 125, 134, 135, 145, 234, 235, 245, and 345In combinatorics, we use the notation,\\[\\displaystyle \\binom 5 3 = 10\\]In general,\\[\\displaystyle \\binom n r = \\dfrac{n!}{r!(n-r)!}\\]where $r \\le n$ , $n! = n \\times (n-1) \\times … \\times 3 \\times 2 \\times 1$ and $0! = 1$It is not until n=23, that a value exceeds one-million:\\[\\displaystyle \\binom {23} {10} = 1144066\\]How many, not necessarily distinct, values of $\\displaystyle \\binom n r$ for $1 \\le n \\le 100$ are greater than one-million?Solutiondic=[1]for i in range(1,101):    val =dic[-1]*i    dic.append(val)def choose(n,r):    sol = dic[n]//(dic[n-r]*dic[r])    return soldef func(maxi, valu):     count = 0    for i in range(2,maxi+1):        for j in range(1,i+1):            val = choose(i,j)            if  val&gt;valu:                count+=1             return countprint(func(100, 10**6))Ouputs4075",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>There are exactly ten ways of selecting three from five, 12345:</p><p>123, 124, 125, 134, 135, 145, 234, 235, 245, and 345</p><p>In combinatorics, we use the notation,</p>\\[\\displaystyle \\binom 5 3 = 10\\]<p>In general,</p>\\[\\displaystyle \\binom n r = \\dfrac{n!}{r!(n-r)!}\\]<p>where $r \\le n$ , $n! = n \\times (n-1) \\times … \\times 3 \\times 2 \\times 1$ and $0! = 1$</p><p>It is not until n=23, that a value exceeds one-million:</p>\\[\\displaystyle \\binom {23} {10} = 1144066\\]<p>How many, not necessarily distinct, values of $\\displaystyle \\binom n r$ for $1 \\le n \\le 100$ are greater than one-million?</p><h3 id=\"solution\">Solution</h3><pre><code>dic=[1]for i in range(1,101):    val =dic[-1]*i    dic.append(val)def choose(n,r):    sol = dic[n]//(dic[n-r]*dic[r])    return soldef func(maxi, valu):     count = 0    for i in range(2,maxi+1):        for j in range(1,i+1):            val = choose(i,j)            if  val&gt;valu:                count+=1             return countprint(func(100, 10**6))</code></pre><p><strong>Ouputs</strong></p><pre><code>4075</code></pre>",
            "url": "http://localhost:4000/problem-53",
            
            
            
            
            
            "date_published": "2020-08-10T00:00:00+05:30",
            "date_modified": "2020-08-10T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-52",
            "title": "Permuted multiples",
            "summary": null,
            "content_text": "Problem StatementIt can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits.Solutionchk=Truewhile chk:    for num in range(100,10**6):        coun=0        for i in range(2,7):            val=i*num            num_str = sorted(list(str(num)))            val_str = sorted(list(str(val)))            if num_str == val_str:                coun+=1        if coun == 5:            print(num)            chk=FalseOutput142857",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.</p><p>Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits.</p><h3 id=\"solution\">Solution</h3><pre><code>chk=Truewhile chk:    for num in range(100,10**6):        coun=0        for i in range(2,7):            val=i*num            num_str = sorted(list(str(num)))            val_str = sorted(list(str(val)))            if num_str == val_str:                coun+=1        if coun == 5:            print(num)            chk=False</code></pre><p><strong>Output</strong></p><pre><code>142857</code></pre>",
            "url": "http://localhost:4000/problem-52",
            
            
            
            
            
            "date_published": "2020-08-10T00:00:00+05:30",
            "date_modified": "2020-08-10T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-50",
            "title": "Consecutive prime sum",
            "summary": null,
            "content_text": "Problem StatementThe prime 41, can be written as the sum of six consecutive primes:41 = 2 + 3 + 5 + 7 + 11 + 13This is the longest sum of consecutive primes that adds to a prime below one-hundred.The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.Which prime, below one-million, can be written as the sum of the most consecutive primes?Solutiondef sieve(n):    is_prime = [True]*n    is_prime[0] = False    is_prime[1] = False    is_prime[2] = True    for i in range(3,int(n**0.5+1),2):        index = i*2        while index &lt; n:            is_prime[index] = False            index = index+i    prime = [2]    for i in range(3,n,2):        if is_prime[i]:            prime.append(i)    return primeprime=sieve(10**6)val=0lastj=len(prime)l=0for i in range(len(prime)):    for j in range(i+l, lastj):        sol = sum(prime[i:j])        if sol &lt; 1000000:            if sol in prime:                l = j-i                val = sol        else:            lastj = j+1            breakprint(val)Output997651",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The prime 41, can be written as the sum of six consecutive primes:</p><p>41 = 2 + 3 + 5 + 7 + 11 + 13</p><p>This is the longest sum of consecutive primes that adds to a prime below one-hundred.</p><p>The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.</p><p>Which prime, below one-million, can be written as the sum of the most consecutive primes?</p><h3 id=\"solution\">Solution</h3><pre><code>def sieve(n):    is_prime = [True]*n    is_prime[0] = False    is_prime[1] = False    is_prime[2] = True    for i in range(3,int(n**0.5+1),2):        index = i*2        while index &lt; n:            is_prime[index] = False            index = index+i    prime = [2]    for i in range(3,n,2):        if is_prime[i]:            prime.append(i)    return primeprime=sieve(10**6)val=0lastj=len(prime)l=0for i in range(len(prime)):    for j in range(i+l, lastj):        sol = sum(prime[i:j])        if sol &lt; 1000000:            if sol in prime:                l = j-i                val = sol        else:            lastj = j+1            breakprint(val)</code></pre><p><strong>Output</strong></p><pre><code>997651</code></pre>",
            "url": "http://localhost:4000/problem-50",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-49",
            "title": "Prime permutations",
            "summary": null,
            "content_text": "Problem StatementThe arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.What 12-digit number do you form by concatenating the three terms in this sequence?Solutionfrom itertools import permutationsdef sieve(n):    is_prime = [True]*n    is_prime[0] = False    is_prime[1] = False    is_prime[2] = True    for i in range(3,int(n**0.5+1),2):        index = i*2        while index &lt; n:            is_prime[index] = False            index = index+i    prime = [2]    for i in range(3,n,2):        if is_prime[i]:            prime.append(i)    return primeprime=sieve(10000)primes = [x for x in prime if x &gt; 1487]def create(b):    for i in range(len(b)):        for j in range(i+1, len(b)):            difference = b[j] - b[i]            if b[j] + difference in b:                return str(b[i])+str(b[j])+str(b[j]+difference)    return Falsefor i in primes:    p = permutations(str(i))    a = [int(''.join(x)) for x in p]    a = list(set([x for x in a if x in primes]))    a.sort()    if len(a) &gt;= 3:        if create(a):            print (create(a))            breakOutput296962999629",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.</p><p>There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.</p><p>What 12-digit number do you form by concatenating the three terms in this sequence?</p><h3 id=\"solution\">Solution</h3><pre><code>from itertools import permutationsdef sieve(n):    is_prime = [True]*n    is_prime[0] = False    is_prime[1] = False    is_prime[2] = True    for i in range(3,int(n**0.5+1),2):        index = i*2        while index &lt; n:            is_prime[index] = False            index = index+i    prime = [2]    for i in range(3,n,2):        if is_prime[i]:            prime.append(i)    return primeprime=sieve(10000)primes = [x for x in prime if x &gt; 1487]def create(b):    for i in range(len(b)):        for j in range(i+1, len(b)):            difference = b[j] - b[i]            if b[j] + difference in b:                return str(b[i])+str(b[j])+str(b[j]+difference)    return Falsefor i in primes:    p = permutations(str(i))    a = [int(''.join(x)) for x in p]    a = list(set([x for x in a if x in primes]))    a.sort()    if len(a) &gt;= 3:        if create(a):            print (create(a))            break</code></pre><p><strong>Output</strong></p><pre><code>296962999629</code></pre>",
            "url": "http://localhost:4000/problem-49",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-48",
            "title": "Self powers",
            "summary": null,
            "content_text": "Problem StatementThe series, 11 + 22 + 33 + … + 1010 = 10405071317.Find the last ten digits of the series, 11 + 22 + 33 + … + 10001000.Solutionsum1=0for i in range(1,1000+1):    sum1=sum1+(i**i)val=str(sum1)val=val[::-1]print(int(val[0:10][::-1]))Output9110846700",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + … + 10<sup>10</sup> = 10405071317.</p><p>Find the last ten digits of the series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + … + 1000<sup>1000</sup>.</p><h3 id=\"solution\">Solution</h3><pre><code>sum1=0for i in range(1,1000+1):    sum1=sum1+(i**i)val=str(sum1)val=val[::-1]print(int(val[0:10][::-1]))</code></pre><p><strong>Output</strong></p><pre><code>9110846700</code></pre>",
            "url": "http://localhost:4000/problem-48",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-47",
            "title": "Distinct primes factors",
            "summary": null,
            "content_text": "Problem StatementThe first two consecutive numbers to have two distinct prime factors are:14 = 2 × 7 15 = 3 × 5The first three consecutive numbers to have three distinct prime factors are:644 = 22 × 7 × 23 645 = 3 × 5 × 43  646 = 2 × 17 × 19 Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?Solutiondef primefactor(number):    i = 2    a = set()    while i &lt; number**0.5 or number == 1:        if number % i == 0:            number = number/i            a.add(i)            i -= 1        i += 1    return (len(a)+1)j = 2*3*5*7while True:    if primefactor(j) == 4:        j += 1        if primefactor(j) == 4:            j += 1            if primefactor(j) == 4:                j += 1                if primefactor(j) == 4:                    print (j-3)                    break    j += 1Output134043",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The first two consecutive numbers to have two distinct prime factors are:</p><p>14 = 2 × 7 <br />15 = 3 × 5</p><p>The first three consecutive numbers to have three distinct prime factors are:</p><p>644 = 2<sup>2</sup> × 7 × 23 <br />645 = 3 × 5 × 43 <br /> 646 = 2 × 17 × 19 <br /></p><p>Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?</p><h3 id=\"solution\">Solution</h3><pre><code>def primefactor(number):    i = 2    a = set()    while i &lt; number**0.5 or number == 1:        if number % i == 0:            number = number/i            a.add(i)            i -= 1        i += 1    return (len(a)+1)j = 2*3*5*7while True:    if primefactor(j) == 4:        j += 1        if primefactor(j) == 4:            j += 1            if primefactor(j) == 4:                j += 1                if primefactor(j) == 4:                    print (j-3)                    break    j += 1</code></pre><p><strong>Output</strong></p><pre><code>134043</code></pre>",
            "url": "http://localhost:4000/problem-47",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-46",
            "title": "Goldbach's other conjecture",
            "summary": null,
            "content_text": "Problem StatementIt was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.9 = 7 + 2×12 15 = 7 + 2×22 21 = 3 + 2×32 25 = 7 + 2×32 27 = 19 + 2×22 33 = 31 + 2×12 \\It turns out that the conjecture was false.What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?Solutionfrom math import sqrtdef isprime(x):    if x%2==0:        return False    else:        for i in range(3, int(x**0.5+1),2):            if x % i == 0:                return False        return Truenumber=3prime=[2]flag=Truewhile flag:    if isprime(number): prime.append(number)    else:        for i in prime:            if sqrt(((number-i)/2)) == int(sqrt(((number-i)/2))):                break        else:            print(number)            break    number=number+2Output5777",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.</p><p>9 = 7 + 2×1<sup>2</sup> <br />15 = 7 + 2×2<sup>2</sup> <br />21 = 3 + 2×3<sup>2</sup> <br />25 = 7 + 2×3<sup>2</sup> <br />27 = 19 + 2×2<sup>2</sup> <br />33 = 31 + 2×1<sup>2</sup> \\</p><p>It turns out that the conjecture was false.</p><p>What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?</p><h3 id=\"solution\">Solution</h3><pre><code>from math import sqrtdef isprime(x):    if x%2==0:        return False    else:        for i in range(3, int(x**0.5+1),2):            if x % i == 0:                return False        return Truenumber=3prime=[2]flag=Truewhile flag:    if isprime(number): prime.append(number)    else:        for i in prime:            if sqrt(((number-i)/2)) == int(sqrt(((number-i)/2))):                break        else:            print(number)            break    number=number+2</code></pre><p><strong>Output</strong></p><pre><code>5777</code></pre>",
            "url": "http://localhost:4000/problem-46",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-45",
            "title": "Triangular, pentagonal, and hexagonal",
            "summary": null,
            "content_text": "Problem StatementTriangle, pentagonal, and hexagonal numbers are generated by the following formulae:Triangle:\t \tTn=n(n+1)/2\t \t1, 3, 6, 10, 15, … Pentagonal:\t \tPn=n(3n−1)/2\t \t1, 5, 12, 22, 35, … Hexagonal:\t \tHn=n(2n−1)\t \t1, 6, 15, 28, 45, … It can be verified that T285 = P165 = H143 = 40755.Find the next triangle number that is also pentagonal and hexagonal.Solutiondef pentagonal(n):    if (1+(24*n+1)**0.5) % 6 == 0:        return True    return Falsedef hexagonal(n):    if (1+(8*n+1)**0.5)%4 == 0:        return True    return Falseflag =Truewhile flag:    for i in range(1,10**6):        a=int(i*(i+1)/2)        if hexagonal(a) and pentagonal(a):            if a &gt; 40755:                 print(a)                flag=False                breakOutput1533776805",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:</p><p>Triangle:\t \tT<sub>n</sub>=n(n+1)/2\t \t1, 3, 6, 10, 15, … <br />Pentagonal:\t \tP<sub>n</sub>=n(3n−1)/2\t \t1, 5, 12, 22, 35, … <br />Hexagonal:\t \tH<sub>n</sub>=n(2n−1)\t \t1, 6, 15, 28, 45, … <br /></p><p>It can be verified that T<sub>285</sub> = P<sub>165</sub> = H<sub>143</sub> = 40755.</p><p>Find the next triangle number that is also pentagonal and hexagonal.</p><h3 id=\"solution\">Solution</h3><pre><code>def pentagonal(n):    if (1+(24*n+1)**0.5) % 6 == 0:        return True    return Falsedef hexagonal(n):    if (1+(8*n+1)**0.5)%4 == 0:        return True    return Falseflag =Truewhile flag:    for i in range(1,10**6):        a=int(i*(i+1)/2)        if hexagonal(a) and pentagonal(a):            if a &gt; 40755:                 print(a)                flag=False                break</code></pre><p><strong>Output</strong></p><pre><code>1533776805</code></pre>",
            "url": "http://localhost:4000/problem-45",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-44",
            "title": "Pentagon numbers",
            "summary": null,
            "content_text": "Problem StatementPentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:\\[1, \\ 5, \\ 12, \\ 22, \\ 35, \\ 51, \\ 70, \\ 92, \\ 117, \\ 145, \\ ...\\]It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = mod(Pk − Pj) is minimised; what is the value of D?Solutiondef pentagonal(n):    if (1+(24*n+1)**0.5) % 6 == 0:        return True    return Falseflag = Truei = 1while flag:    for j in range(1, i):        a = i*(3*i-1)/2        b = j*(3*j-1)/2        if pentagonal(a+b) and pentagonal(a-b):            print (a-b)            flag = False            break    i += 1Output5482660",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Pentagonal numbers are generated by the formula, P<sub>n</sub>=n(3n−1)/2. The first ten pentagonal numbers are:</p>\\[1, \\ 5, \\ 12, \\ 22, \\ 35, \\ 51, \\ 70, \\ 92, \\ 117, \\ 145, \\ ...\\]<p>It can be seen that P<sub>4</sub> + P<sub>7</sub> = 22 + 70 = 92 = P<sub>8</sub>. However, their difference, 70 − 22 = 48, is not pentagonal.</p><p>Find the pair of pentagonal numbers, P<sub>j</sub> and P<sub>k</sub>, for which their sum and difference are pentagonal and D = mod(P<sub>k</sub> − P<sub>j</sub>) is minimised; what is the value of D?</p><h3 id=\"solution\">Solution</h3><pre><code>def pentagonal(n):    if (1+(24*n+1)**0.5) % 6 == 0:        return True    return Falseflag = Truei = 1while flag:    for j in range(1, i):        a = i*(3*i-1)/2        b = j*(3*j-1)/2        if pentagonal(a+b) and pentagonal(a-b):            print (a-b)            flag = False            break    i += 1</code></pre><p><strong>Output</strong></p><pre><code>5482660</code></pre>",
            "url": "http://localhost:4000/problem-44",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-43",
            "title": "Sub-string divisibility",
            "summary": null,
            "content_text": "Problem StatementThe number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:  d2d3d4=406 is divisible by 2  d3d4d5=063 is divisible by 3  d4d5d6=635 is divisible by 5  d5d6d7=357 is divisible by 7  d6d7d8=572 is divisible by 11  d7d8d9=728 is divisible by 13  d8d9d10=289 is divisible by 17Find the sum of all 0 to 9 pandigital numbers with this property.Solutionfrom itertools import permutationsa='1234567890'p=permutations(a[:10])sum1=0for i in p:    if i[0]!='0':        temp=''.join(list(i))        if int(temp[1:4])%2==0 and int(temp[2:5])%3==0 and int(temp[3:6])%5==0 and int(temp[4:7])%7==0 and int(temp[5:8])%11==0 and int(temp[6:9])%13==0 and int(temp[7:10])%17==0:            sum1=sum1+int(temp)print(sum1)Output16695334890",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.</p><p>Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:</p><ul>  <li>d<sub>2</sub>d<sub>3</sub>d<sub>4</sub>=406 is divisible by 2</li>  <li>d<sub>3</sub>d<sub>4</sub>d<sub>5</sub>=063 is divisible by 3</li>  <li>d<sub>4</sub>d<sub>5</sub>d<sub>6</sub>=635 is divisible by 5</li>  <li>d<sub>5</sub>d<sub>6</sub>d<sub>7</sub>=357 is divisible by 7</li>  <li>d<sub>6</sub>d<sub>7</sub>d<sub>8</sub>=572 is divisible by 11</li>  <li>d<sub>7</sub>d<sub>8</sub>d<sub>9</sub>=728 is divisible by 13</li>  <li>d<sub>8</sub>d<sub>9</sub>d<sub>10</sub>=289 is divisible by 17</li></ul><p>Find the sum of all 0 to 9 pandigital numbers with this property.</p><h3 id=\"solution\">Solution</h3><pre><code>from itertools import permutationsa='1234567890'p=permutations(a[:10])sum1=0for i in p:    if i[0]!='0':        temp=''.join(list(i))        if int(temp[1:4])%2==0 and int(temp[2:5])%3==0 and int(temp[3:6])%5==0 and int(temp[4:7])%7==0 and int(temp[5:8])%11==0 and int(temp[6:9])%13==0 and int(temp[7:10])%17==0:            sum1=sum1+int(temp)print(sum1)</code></pre><p><strong>Output</strong></p><pre><code>16695334890</code></pre>",
            "url": "http://localhost:4000/problem-43",
            
            
            
            
            
            "date_published": "2020-07-20T00:00:00+05:30",
            "date_modified": "2020-07-20T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-42",
            "title": "Coded triangle numbers",
            "summary": null,
            "content_text": "Problem StatementThe nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.Using words.txt, a 16K text file containing nearly two-thousand common English words, how many are triangle words?Solutionname=[]with open('words.txt','r') as file:     for line in file:         for word in line.split(','):             word=word.strip('\"')            name.append(word) val=dict()temp=1for i in range(65,91):    val[chr(i)] = temp    temp+=1def tvalue():    val1=[]    for n in range(1,26*10):        tmp=int((n+1)*n*0.5)        val1.append(tmp)    return val1t=tvalue()count=0for i in name:    s=0    for j in i:        s=s+val[j]    if s in t:        count=count+1print(count)Output162",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:</p><p>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …</p><p>By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.</p><p>Using <a href=\"https://projecteuler.net/project/resources/p042_words.txt\">words.txt</a>, a 16K text file containing nearly two-thousand common English words, how many are triangle words?</p><h3 id=\"solution\">Solution</h3><pre><code>name=[]with open('words.txt','r') as file:     for line in file:         for word in line.split(','):             word=word.strip('\"')            name.append(word) val=dict()temp=1for i in range(65,91):    val[chr(i)] = temp    temp+=1def tvalue():    val1=[]    for n in range(1,26*10):        tmp=int((n+1)*n*0.5)        val1.append(tmp)    return val1t=tvalue()count=0for i in name:    s=0    for j in i:        s=s+val[j]    if s in t:        count=count+1print(count)</code></pre><p><strong>Output</strong></p><pre><code>162</code></pre>",
            "url": "http://localhost:4000/problem-42",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-41",
            "title": "Pandigital prime",
            "summary": null,
            "content_text": "Problem StatementWe shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.What is the largest n-digit pandigital prime that exists?Solutionimport itertoolsdef isprime(n):    for i in range(2, int(n**0.5)+1):        if n % i == 0:            return False    return Truea='123456789'j=9flag=Truewhile flag:    z=itertools.permutations(a[:j])    z = list(z)[::-1]    for i in z:        if int(i[j-1]) % 2 != 0:            number = int(''.join(i))            if (number+1) % 6 == 0 or (number-1) % 6 == 0:                 if isprime(number):                    print (number)                    flag = False                    break    j -= 1Output7652413",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.</p><p>What is the largest n-digit pandigital prime that exists?</p><h3 id=\"solution\">Solution</h3><pre><code>import itertoolsdef isprime(n):    for i in range(2, int(n**0.5)+1):        if n % i == 0:            return False    return Truea='123456789'j=9flag=Truewhile flag:    z=itertools.permutations(a[:j])    z = list(z)[::-1]    for i in z:        if int(i[j-1]) % 2 != 0:            number = int(''.join(i))            if (number+1) % 6 == 0 or (number-1) % 6 == 0:                 if isprime(number):                    print (number)                    flag = False                    break    j -= 1</code></pre><p><strong>Output</strong></p><pre><code>7652413</code></pre>",
            "url": "http://localhost:4000/problem-41",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-40",
            "title": "Champernowne's constant",
            "summary": null,
            "content_text": "Problem StatementAn irrational decimal fraction is created by concatenating the positive integers:0.123456789101112131415161718192021…It can be seen that the 12th digit of the fractional part is 1.If dn represents the nth digit of the fractional part, find the value of the following expression.d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000Solutionnumber=\"\"for i in range(1,10**6+1):    number=number+str(i)r =int(number[1-1]) * int(number[10-1]) * int(number[100-1]) * int(number[1000-1]) * int(number[10000-1]) * int(number[100000-1]) * int(number[1000000-1])print(r)Output210",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>An irrational decimal fraction is created by concatenating the positive integers:</p><p>0.12345678910<strong>1</strong>112131415161718192021…</p><p>It can be seen that the 12<sup>th</sup> digit of the fractional part is 1.</p><p>If dn represents the nth digit of the fractional part, find the value of the following expression.</p><p><em>d<sub>1</sub> × d<sub>10</sub> × d<sub>100</sub> × d<sub>1000</sub> × d<sub>10000</sub> × d<sub>100000</sub> × d<sub>1000000</sub></em></p><h3 id=\"solution\">Solution</h3><pre><code>number=\"\"for i in range(1,10**6+1):    number=number+str(i)r =int(number[1-1]) * int(number[10-1]) * int(number[100-1]) * int(number[1000-1]) * int(number[10000-1]) * int(number[100000-1]) * int(number[1000000-1])print(r)</code></pre><p><strong>Output</strong></p><pre><code>210</code></pre>",
            "url": "http://localhost:4000/problem-40",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-39",
            "title": "Integer right triangles",
            "summary": null,
            "content_text": "Problem StatementIf p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.{20,48,52}, {24,45,51}, {30,40,50}For which value of p ≤ 1000, is the number of solutions maximised?Solutiondef triplets(p):    val=[]    for a in range(1,p):        b=int((p*(p-2*a))/(2*(p-a)))        c=p-a-b        if (a*a+b*b)==c*c and a+b&gt;c and b&gt;a:            val.append([a,b,c])    return valval2=[]temp=[]for p in range(3,1001):    temp=triplets(p)    if len(temp)&gt;len(val2):        val2=temp        peri = pprint(peri)Output840",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.</p><p>{20,48,52}, {24,45,51}, {30,40,50}</p><p>For which value of p ≤ 1000, is the number of solutions maximised?</p><h3 id=\"solution\">Solution</h3><pre><code>def triplets(p):    val=[]    for a in range(1,p):        b=int((p*(p-2*a))/(2*(p-a)))        c=p-a-b        if (a*a+b*b)==c*c and a+b&gt;c and b&gt;a:            val.append([a,b,c])    return valval2=[]temp=[]for p in range(3,1001):    temp=triplets(p)    if len(temp)&gt;len(val2):        val2=temp        peri = pprint(peri)</code></pre><p><strong>Output</strong></p><pre><code>840</code></pre>",
            "url": "http://localhost:4000/problem-39",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-38",
            "title": "Pandigital multiples",
            "summary": null,
            "content_text": "Problem StatementTake the number 192 and multiply it by each of 1, 2, and 3:192 × 1 = 192 192 × 2 = 384 192 × 3 = 576By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, … , n) where n &gt; 1?Solutionlargest = 0for i in range(1,10000):\t\tmultiplication = ''\t\tinteger = 1\t\twhile len(multiplication) &lt; 9:\t\t\t\tmultiplication += str(i*integer)\t\t\t\tinteger += 1\t\t\tif ((len(multiplication) == 9) and (len(set(multiplication)) == 9) \t\tand ('0' not in multiplication)):\t\t\tif int(multiplication) &gt; largest:\t\t\tlargest = int(multiplication)print (largest)Output932718654",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Take the number 192 and multiply it by each of 1, 2, and 3:</p><p>192 × 1 = 192 <br />192 × 2 = 384 <br />192 × 3 = 576</p><p>By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)</p><p>The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).</p><p>What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, … , n) where n &gt; 1?</p><h3 id=\"solution\">Solution</h3><pre><code>largest = 0for i in range(1,10000):\t\tmultiplication = ''\t\tinteger = 1\t\twhile len(multiplication) &lt; 9:\t\t\t\tmultiplication += str(i*integer)\t\t\t\tinteger += 1\t\t\tif ((len(multiplication) == 9) and (len(set(multiplication)) == 9) \t\tand ('0' not in multiplication)):\t\t\tif int(multiplication) &gt; largest:\t\t\tlargest = int(multiplication)print (largest)</code></pre><p><strong>Output</strong></p><pre><code>932718654</code></pre>",
            "url": "http://localhost:4000/problem-38",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-36",
            "title": "Double-base palindromes",
            "summary": null,
            "content_text": "Problem StatementThe decimal number, 585 = 10010010012(binary), is palindromic in both bases.Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.(Please note that the palindromic number, in either base, may not include leading zeros.)Solutiondef decimalToBinary(n):      return bin(n).replace(\"0b\", \"\")  def palindrome(x):    if x==x[::-1]:        return Truesum1=0  for i in range(1,10**6):    if palindrome(str(i)):        if palindrome(str(decimalToBinary(i))):            sum1=sum1+i            print(sum1)Output872187",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The decimal number, 585 = 1001001001<sub>2</sub>(binary), is palindromic in both bases.</p><p>Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.</p><p>(Please note that the palindromic number, in either base, may not include leading zeros.)</p><h3 id=\"solution\">Solution</h3><pre><code>def decimalToBinary(n):      return bin(n).replace(\"0b\", \"\")  def palindrome(x):    if x==x[::-1]:        return Truesum1=0  for i in range(1,10**6):    if palindrome(str(i)):        if palindrome(str(decimalToBinary(i))):            sum1=sum1+i            print(sum1)</code></pre><p><strong>Output</strong></p><pre><code>872187</code></pre>",
            "url": "http://localhost:4000/problem-36",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-35",
            "title": "Circular primes",
            "summary": null,
            "content_text": "Problem StatementThe number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.How many circular primes are there below one million?Solutiondef sieve(n):\tis_prime = [True]*n\tis_prime[0] = False\tis_prime[1] = False\tis_prime[2] = True\tfor i in range(3,int(n**0.5+1),2):\t\tindex = i*2\t\twhile index &lt; n:\t\t\tis_prime[index] = False\t\t\tindex = index+i\tprime = [2]\tfor i in range(3,n,2):\t\tif is_prime[i]:\t\t\tprime.append(i)\treturn primeprimes = sieve(1000000)counter = 0for i in primes:\tflag = True\tnumber = i/10\twhile number:\t\tif (number%10) % 2 == 0 or (number%10)%5 == 0:\t\t\tflag = False\t\t\tbreak\t\tnumber //= 10\tif flag:\t\tlength = len(str(i))\t\tnumber = i\t\tcounter += 1\t\tfor j in range(length):\t\t\tnumber = (number%10)*10**(length-1)+number//10\t\t\tif number not in primes:\t\t\t\tcounter -= 1\t\t\t\tbreakprint (counter)Output55",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.</p><p>There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.</p><p>How many circular primes are there below one million?</p><h3 id=\"solution\">Solution</h3><pre><code>def sieve(n):\tis_prime = [True]*n\tis_prime[0] = False\tis_prime[1] = False\tis_prime[2] = True\tfor i in range(3,int(n**0.5+1),2):\t\tindex = i*2\t\twhile index &lt; n:\t\t\tis_prime[index] = False\t\t\tindex = index+i\tprime = [2]\tfor i in range(3,n,2):\t\tif is_prime[i]:\t\t\tprime.append(i)\treturn primeprimes = sieve(1000000)counter = 0for i in primes:\tflag = True\tnumber = i/10\twhile number:\t\tif (number%10) % 2 == 0 or (number%10)%5 == 0:\t\t\tflag = False\t\t\tbreak\t\tnumber //= 10\tif flag:\t\tlength = len(str(i))\t\tnumber = i\t\tcounter += 1\t\tfor j in range(length):\t\t\tnumber = (number%10)*10**(length-1)+number//10\t\t\tif number not in primes:\t\t\t\tcounter -= 1\t\t\t\tbreakprint (counter)</code></pre><p><strong>Output</strong></p><pre><code>55</code></pre>",
            "url": "http://localhost:4000/problem-35",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-34",
            "title": "Digit factorials",
            "summary": null,
            "content_text": "Problem Statement145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.Find the sum of all numbers which are equal to the sum of the factorial of their digits.Note: as 1! = 1 and 2! = 2 are not sums they are not included.Solutiondef factorial(x):    fact = 1      for i in range(1,x+1):         fact = fact * i     return factval=[]for i in range(3,10**6):    a=str(i)    sum1=0        for j in a:        sum1=sum1+factorial(int(j))    if int(a) == sum1 :         val.append(int(a))    print(sum(val))Output40730",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.</p><p>Find the sum of all numbers which are equal to the sum of the factorial of their digits.</p><p>Note: as 1! = 1 and 2! = 2 are not sums they are not included.</p><h3 id=\"solution\">Solution</h3><pre><code>def factorial(x):    fact = 1      for i in range(1,x+1):         fact = fact * i     return factval=[]for i in range(3,10**6):    a=str(i)    sum1=0        for j in a:        sum1=sum1+factorial(int(j))    if int(a) == sum1 :         val.append(int(a))    print(sum(val))</code></pre><p><strong>Output</strong></p><pre><code>40730</code></pre>",
            "url": "http://localhost:4000/problem-34",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-32",
            "title": "Pandigital products",
            "summary": null,
            "content_text": "Problem StatementWe shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.Solutionfrom collections import Counterdef pandigital(x):    a=str(x)    j=Counter(a)    val=0    for i in '123456789':        if i in j:            if j[i]==1:                val=val+1    if val==9:        return True    return Falsep = set()for i in range(2,  60):    start = 1234 if i &lt; 10 else 123     for j in range(start, 10000//i):        if pandigital(str(i) + str(j) + str(i*j)): p.add(i*j)print(sum(p))Output45228",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.</p><p>The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.</p><p>Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.</p><h3 id=\"solution\">Solution</h3><pre><code>from collections import Counterdef pandigital(x):    a=str(x)    j=Counter(a)    val=0    for i in '123456789':        if i in j:            if j[i]==1:                val=val+1    if val==9:        return True    return Falsep = set()for i in range(2,  60):    start = 1234 if i &lt; 10 else 123     for j in range(start, 10000//i):        if pandigital(str(i) + str(j) + str(i*j)): p.add(i*j)print(sum(p))</code></pre><p><strong>Output</strong></p><pre><code>45228</code></pre>",
            "url": "http://localhost:4000/problem-32",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-31",
            "title": "Coin sums",
            "summary": null,
            "content_text": "Problem StatementIn the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).It is possible to make £2 in the following way:1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1pHow many different ways can £2 be made using any number of coins?Solutioncoins = [1, 2, 5, 10, 20, 50, 100, 200]ways = [1] + [0]*200for coin in coins:    for i in range(coin,201):        ways[i] += ways[i-coin]print(ways[200])Output73682",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:</p><p>1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).</p><p>It is possible to make £2 in the following way:</p><p>1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p</p><p>How many different ways can £2 be made using any number of coins?</p><h3 id=\"solution\">Solution</h3><pre><code>coins = [1, 2, 5, 10, 20, 50, 100, 200]ways = [1] + [0]*200for coin in coins:    for i in range(coin,201):        ways[i] += ways[i-coin]print(ways[200])</code></pre><p><strong>Output</strong></p><pre><code>73682</code></pre>",
            "url": "http://localhost:4000/problem-31",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-30",
            "title": "Digit fifth powers",
            "summary": null,
            "content_text": "Problem StatementSurprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:1634 = 14 + 64 + 34 + 44 8208 = 84 + 24 + 04 + 84 9474 = 94 + 44 + 74 + 44 As 1 = 14 is not a sum it is not included.The sum of these numbers is 1634 + 8208 + 9474 = 19316.Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.Solutionfinal=[]for a in range(2,355000):    s=list(str(a))    temp=0    for i in s:        temp=temp+int(i)**5    if temp==a:        final.append(temp)    print(sum(final))Output443839",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:</p><p>1634 = 1<sup>4</sup> + 6<sup>4</sup> + 3<sup>4</sup> + 4<sup>4</sup> <br />8208 = 8<sup>4</sup> + 2<sup>4</sup> + 0<sup>4</sup> + 8<sup>4</sup> <br />9474 = 9<sup>4</sup> + 4<sup>4</sup> + 7<sup>4</sup> + 4<sup>4</sup> <br />As 1 = 1<sup>4</sup> is not a sum it is not included.</p><p>The sum of these numbers is 1634 + 8208 + 9474 = 19316.</p><p>Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.</p><h3 id=\"solution\">Solution</h3><pre><code>final=[]for a in range(2,355000):    s=list(str(a))    temp=0    for i in s:        temp=temp+int(i)**5    if temp==a:        final.append(temp)    print(sum(final))</code></pre><p><strong>Output</strong></p><pre><code>443839</code></pre>",
            "url": "http://localhost:4000/problem-30",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-29",
            "title": "Distinct powers",
            "summary": null,
            "content_text": "Problem StatementConsider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:22=4, 23=8, 24=16, 25=32 32=9, 33=27, 34=81, 35=243 42=16, 43=64, 44=256, 45=1024 52=25, 53=125, 54=625, 55=3125 \\If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?Solutiontotal=[]for a in range(2,101):    for b in range(2,101):        total.append(a**b)        total1=set(total)print(len(total1))Output9183",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:</p><p>2<sup>2</sup>=4, 2<sup>3</sup>=8, 2<sup>4</sup>=16, 2<sup>5</sup>=32 <br />3<sup>2</sup>=9, 3<sup>3</sup>=27, 3<sup>4</sup>=81, 3<sup>5</sup>=243 <br />4<sup>2</sup>=16, 4<sup>3</sup>=64, 4<sup>4</sup>=256, 4<sup>5</sup>=1024 <br />5<sup>2</sup>=25, 5<sup>3</sup>=125, 5<sup>4</sup>=625, 5<sup>5</sup>=3125 \\</p><p>If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:</p><p>4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125</p><p>How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?</p><h3 id=\"solution\">Solution</h3><pre><code>total=[]for a in range(2,101):    for b in range(2,101):        total.append(a**b)        total1=set(total)print(len(total1))</code></pre><p><strong>Output</strong></p><pre><code>9183</code></pre>",
            "url": "http://localhost:4000/problem-29",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-28",
            "title": "Number spiral diagonals",
            "summary": null,
            "content_text": "Problem StatementStarting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:\\[\\\\ 21 \\ \\ 22 \\ \\ 23 \\ \\ 24 \\ \\ 25 \\\\ 20 \\ \\ \\ 7 \\ \\ \\ 8 \\ \\ \\ 9 \\ \\ \\ 10 \\\\ 19 \\ \\ \\ 6 \\ \\ \\ 1 \\ \\ \\ 2 \\ \\ \\ 11 \\\\ 18 \\ \\ \\ 5 \\ \\ \\ 4 \\ \\ \\ 3 \\ \\ \\ 12 \\\\ 17 \\ \\ 16 \\ \\ 15 \\ \\ 14 \\ \\ 13\\]It can be verified that the sum of the numbers on the diagonals is 101.What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?Solutiondef printSpiral(n) :     val=[]    for i in range(0, n) :         for j in range(0, n) :                           x = min(min(i, j), min(n - 1 - i, n - 1 - j))                           if (i &lt;= j) :                 q=(n - 2 * x) * (n - 2 * x) - (i - x)- (j - x)                val.append(q)              else :                 q=((n - 2 * x - 2) *                       (n - 2 * x - 2) +                       (i - x) + (j - x))                val.append(q)                    return val           n = 1001final=[]sum1=0sum2=0j=0val=[] val = printSpiral(n)for i in range(0,len(val),n):    final.append(val[i:i+n][::-1])for i in range(len(final)):    sum1+=final[i][i]for i in range(len(final)):    sum2+=final[i][len(final[i])-j-1]    j=j+1    print(sum1+sum2-final[len(final)//2][len(final[0])//2])Output669171001",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:</p>\\[\\\\ 21 \\ \\ 22 \\ \\ 23 \\ \\ 24 \\ \\ 25 \\\\ 20 \\ \\ \\ 7 \\ \\ \\ 8 \\ \\ \\ 9 \\ \\ \\ 10 \\\\ 19 \\ \\ \\ 6 \\ \\ \\ 1 \\ \\ \\ 2 \\ \\ \\ 11 \\\\ 18 \\ \\ \\ 5 \\ \\ \\ 4 \\ \\ \\ 3 \\ \\ \\ 12 \\\\ 17 \\ \\ 16 \\ \\ 15 \\ \\ 14 \\ \\ 13\\]<p>It can be verified that the sum of the numbers on the diagonals is 101.</p><p>What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?</p><h3 id=\"solution\">Solution</h3><pre><code>def printSpiral(n) :     val=[]    for i in range(0, n) :         for j in range(0, n) :                           x = min(min(i, j), min(n - 1 - i, n - 1 - j))                           if (i &lt;= j) :                 q=(n - 2 * x) * (n - 2 * x) - (i - x)- (j - x)                val.append(q)              else :                 q=((n - 2 * x - 2) *                       (n - 2 * x - 2) +                       (i - x) + (j - x))                val.append(q)                    return val           n = 1001final=[]sum1=0sum2=0j=0val=[] val = printSpiral(n)for i in range(0,len(val),n):    final.append(val[i:i+n][::-1])for i in range(len(final)):    sum1+=final[i][i]for i in range(len(final)):    sum2+=final[i][len(final[i])-j-1]    j=j+1    print(sum1+sum2-final[len(final)//2][len(final[0])//2])</code></pre><p><strong>Output</strong></p><pre><code>669171001</code></pre>",
            "url": "http://localhost:4000/problem-28",
            
            
            
            
            
            "date_published": "2020-07-16T00:00:00+05:30",
            "date_modified": "2020-07-16T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-26",
            "title": "Reciprocal cycles",
            "summary": null,
            "content_text": "Problem StatementA unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:\\[1/2\t= \t0.5 \\\\ 1/3\t= \t0.(3) \\\\1/4\t= \t0.25 \\\\1/5\t= \t0.2 \\\\1/6\t= \t0.1(6) \\\\1/7\t= \t0.(142857) \\\\1/8\t= \t0.125 \\\\1/9\t= \t0.(1) \\\\1/10 = \t0.1 \\\\\\]Where 0.1(6) means 0.166666…, and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.Find the value of d &lt; 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.Solutiondef divide(n,d,p):    i = 0     remainders = set()         while i &lt; p:        if n &lt; d:            n = n * 10                 n = n % d         if n in remainders:             return(d,i)         else:            remainders.add(n)                 i = i + 1     longest = [0,0]largest_denominator = 1000for x in range(2,largest_denominator + 1):  y = divide(1,x,x)   if y[1] &gt; longest[1]:    longest = yprint(longest[0])Output983",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:</p>\\[1/2\t= \t0.5 \\\\ 1/3\t= \t0.(3) \\\\1/4\t= \t0.25 \\\\1/5\t= \t0.2 \\\\1/6\t= \t0.1(6) \\\\1/7\t= \t0.(142857) \\\\1/8\t= \t0.125 \\\\1/9\t= \t0.(1) \\\\1/10 = \t0.1 \\\\\\]<p>Where 0.1(6) means 0.166666…, and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.</p><p>Find the value of d &lt; 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.</p><h3 id=\"solution\">Solution</h3><pre><code>def divide(n,d,p):    i = 0     remainders = set()         while i &lt; p:        if n &lt; d:            n = n * 10                 n = n % d         if n in remainders:             return(d,i)         else:            remainders.add(n)                 i = i + 1     longest = [0,0]largest_denominator = 1000for x in range(2,largest_denominator + 1):  y = divide(1,x,x)   if y[1] &gt; longest[1]:    longest = yprint(longest[0])</code></pre><p><strong>Output</strong></p><pre><code>983</code></pre>",
            "url": "http://localhost:4000/problem-26",
            
            
            
            
            
            "date_published": "2020-07-15T00:00:00+05:30",
            "date_modified": "2020-07-15T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-25",
            "title": "1000-digit Fibonacci number",
            "summary": null,
            "content_text": "Problem StatementThe Fibonacci sequence is defined by the recurrence relation:Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.Hence the first 12 terms will be:F1 = 1 F2 = 1 F3 = 2 F4 = 3 F5 = 5 F6 = 8 F7 = 13 F8 = 21 F9 = 34 F10 = 55 F11 = 89 F12 = 144 The 12th term, F12, is the first term to contain three digits.What is the index of the first term in the Fibonacci sequence to contain 1000 digits?Solutiondef fibonacci():    g=0    i=2    l=[1,1]    while(g&lt;1000):        temp=l[i-1]+l[i-2]        l.append(temp)        g=len(str(temp))        index=i        i=i+1            return index+1print(fibonacci())Output4782",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>The Fibonacci sequence is defined by the recurrence relation:</p><p>F<sub>n</sub> = F<sub>n−1</sub> + F<sub>n−2</sub>, where F<sub>1</sub> = 1 and F<sub>2</sub> = 1.</p><p>Hence the first 12 terms will be:</p><p>F<sub>1</sub> = 1 <br />F<sub>2</sub> = 1 <br />F<sub>3</sub> = 2 <br />F<sub>4</sub> = 3 <br />F<sub>5</sub> = 5 <br />F<sub>6</sub> = 8 <br />F<sub>7</sub> = 13 <br />F<sub>8</sub> = 21 <br />F<sub>9</sub> = 34 <br />F<sub>10</sub> = 55 <br />F<sub>11</sub> = 89 <br />F<sub>12</sub> = 144 <br /></p><p>The 12th term, F<sub>12</sub>, is the first term to contain three digits.</p><p>What is the index of the first term in the Fibonacci sequence to contain 1000 digits?</p><h3 id=\"solution\">Solution</h3><pre><code>def fibonacci():    g=0    i=2    l=[1,1]    while(g&lt;1000):        temp=l[i-1]+l[i-2]        l.append(temp)        g=len(str(temp))        index=i        i=i+1            return index+1print(fibonacci())</code></pre><p><strong>Output</strong></p><pre><code>4782</code></pre>",
            "url": "http://localhost:4000/problem-25",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-24",
            "title": "Lexicographic permutations",
            "summary": null,
            "content_text": "Problem StatementA permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:\\[012 \\ 021 \\ 102 \\ 120 \\ 201 \\ 210\\]What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?Solutionfrom itertools import permutationsperms = [''.join(p) for p in permutations('0123456789')]prm=sorted(perms)print(prm[10**6-1]) Output2783915460",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:</p>\\[012 \\ 021 \\ 102 \\ 120 \\ 201 \\ 210\\]<p>What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?</p><h3 id=\"solution\">Solution</h3><pre><code>from itertools import permutationsperms = [''.join(p) for p in permutations('0123456789')]prm=sorted(perms)print(prm[10**6-1]) </code></pre><p><strong>Output</strong></p><pre><code>2783915460</code></pre>",
            "url": "http://localhost:4000/problem-24",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-22",
            "title": "Names scores",
            "summary": null,
            "content_text": "Problem StatementUsing name.txt, a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.What is the total of all the name scores in the file?Solutionname=[]with open('name.txt','r') as file:     for line in file:         for word in line.split(','):             word=word.strip('\"')            name.append(word) name=sorted(name)total=0val=dict()j=1for i in range(65,91):    val[chr(i)]=j;    j=j+1for x in name:    temp=0    for j in x:        temp+=val[j]    total+=((name.index(x)+1)*temp)print(total)Output871198282",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Using <a href=\"https://projecteuler.net/project/resources/p022_names.txt\">name.txt</a>, a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.</p><p>For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.</p><p>What is the total of all the name scores in the file?</p><h3 id=\"solution\">Solution</h3><pre><code>name=[]with open('name.txt','r') as file:     for line in file:         for word in line.split(','):             word=word.strip('\"')            name.append(word) name=sorted(name)total=0val=dict()j=1for i in range(65,91):    val[chr(i)]=j;    j=j+1for x in name:    temp=0    for j in x:        temp+=val[j]    total+=((name.index(x)+1)*temp)print(total)</code></pre><p><strong>Output</strong></p><pre><code>871198282</code></pre>",
            "url": "http://localhost:4000/problem-22",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-21",
            "title": "Amicable numbers",
            "summary": null,
            "content_text": "Problem StatementLet d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.Evaluate the sum of all the amicable numbers under 10000.Solutiondef divisor(x):    lt=[]    for i in range(1,x):        if x%i==0:            lt.append(i)    return ltdef d(s):    return sum(divisor(s))am_num=[]for i in range(1,10000+1):    a=d(i)    b=d(a)    if b==i and a!=i:        am_num.append(i)print (sum(am_num))Output31626",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.</p><p>For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.</p><p>Evaluate the sum of all the amicable numbers under 10000.</p><h3 id=\"solution\">Solution</h3><pre><code>def divisor(x):    lt=[]    for i in range(1,x):        if x%i==0:            lt.append(i)    return ltdef d(s):    return sum(divisor(s))am_num=[]for i in range(1,10000+1):    a=d(i)    b=d(a)    if b==i and a!=i:        am_num.append(i)print (sum(am_num))</code></pre><p><strong>Output</strong></p><pre><code>31626</code></pre>",
            "url": "http://localhost:4000/problem-21",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-20",
            "title": "Factorial digit sum",
            "summary": null,
            "content_text": "Problem Statementn! means n × (n − 1) × … × 3 × 2 × 1For example, 10! = 10 × 9 × … × 3 × 2 × 1 = 3628800,and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.Find the sum of the digits in the number 100!Solutionfrom math import factoriala=list(str(factorial(100)))sum=0for i in a:    sum+=int(i)print(sum)Output648",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>n! means n × (n − 1) × … × 3 × 2 × 1</p><p>For example, 10! = 10 × 9 × … × 3 × 2 × 1 = 3628800,and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.</p><p>Find the sum of the digits in the number 100!</p><h3 id=\"solution\">Solution</h3><pre><code>from math import factoriala=list(str(factorial(100)))sum=0for i in a:    sum+=int(i)print(sum)</code></pre><p><strong>Output</strong></p><pre><code>648</code></pre>",
            "url": "http://localhost:4000/problem-20",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-19",
            "title": "Counting Sundays",
            "summary": null,
            "content_text": "Problem StatementYou are given the following information, but you may prefer to do some research for yourself.  1 Jan 1900 was a Monday.  Thirty days has September, April, June and November. All the rest have thirty-one, Saving February alone, Which has twenty-eight, rain or shine. And on leap years, twenty-nine.  A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?Solutionfrom datetime import *counter = 0year = 1901month = 1curr_day = date(year,month,1)while(curr_day.year &lt; 2001):\tif(curr_day.weekday() == 6):\t\tcounter += 1\tif(month+1 == 13):\t\tmonth = 1\t\tyear += 1\telse:\t\tmonth += 1\tcurr_day = date(year,month,1)print(str(counter))Output171",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>You are given the following information, but you may prefer to do some research for yourself.</p><ul>  <li>1 Jan 1900 was a Monday.</li>  <li>Thirty days has September, April, June and November. All the rest have thirty-one, Saving February alone, Which has twenty-eight, rain or shine. And on leap years, twenty-nine.</li>  <li>A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li></ul><p>How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</p><h3 id=\"solution\">Solution</h3><pre><code>from datetime import *counter = 0year = 1901month = 1curr_day = date(year,month,1)while(curr_day.year &lt; 2001):\tif(curr_day.weekday() == 6):\t\tcounter += 1\tif(month+1 == 13):\t\tmonth = 1\t\tyear += 1\telse:\t\tmonth += 1\tcurr_day = date(year,month,1)print(str(counter))</code></pre><p><strong>Output</strong></p><pre><code>171</code></pre>",
            "url": "http://localhost:4000/problem-19",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/problem-18",
            "title": "Maximum path sum I",
            "summary": null,
            "content_text": "Problem StatementBy starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.3 7 4 2 4 6 8 5 9 3 That is, 3 + 7 + 4 + 9 = 23.Find the maximum total from top to bottom of the triangle below:75 95 64 17 47 82 18 35 87 10 20 04 82 47 65 19 01 23 75 03 34 88 02 77 73 07 63 67 99 65 04 28 06 16 70 92 41 41 26 56 83 40 80 70 33 41 48 72 33 47 32 37 16 94 29 53 71 44 65 25 43 91 52 97 51 14 70 11 33 28 77 73 17 78 39 68 17 57 91 71 52 38 17 14 91 43 58 50 27 29 48 63 66 04 68 89 53 67 30 73 16 69 87 40 31 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23 NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)Solutiona=[[75],[95,64],[17,47,82],[18,35,87,10],[20,4,82,47,65],[19,1,23,75,3,34],[88,2,77,73,7,63,67],[99,65,4,28,6,16,70,92],[41,41,26,56,83,40,80,70,33],[41,48,72,33,47,32,37,16,94,29],[53,71,44,65,25,43,91,52,97,51,14],[70,11,33,28,77,73,17,78,39,68,17,57],[91,71,52,38,17,14,91,43,58,50,27,29,48],[63,66,4,68,89,53,67,30,73,16,69,87,40,31],[4,62,98,27,23,9,70,98,73,93,38,53,60,4,23]]for x in range(len(a)-1,-1,-1):    for y in range(0,x):         a[x-1][y]+=max(a[x][y],a[x][y+1])print (a[0][0])Output1074",
            "content_html": "<h3 id=\"problem-statement\">Problem Statement</h3><p>By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.</p><p><strong>3</strong> <br /><strong>7</strong> 4 <br />2 <strong>4</strong> 6 <br />8 5 <strong>9</strong> 3 <br /></p><p>That is, 3 + 7 + 4 + 9 = 23.</p><p>Find the maximum total from top to bottom of the triangle below:</p><p>75 <br />95 64 <br />17 47 82 <br />18 35 87 10 <br />20 04 82 47 65 <br />19 01 23 75 03 34 <br />88 02 77 73 07 63 67 <br />99 65 04 28 06 16 70 92 <br />41 41 26 56 83 40 80 70 33 <br />41 48 72 33 47 32 37 16 94 29 <br />53 71 44 65 25 43 91 52 97 51 14 <br />70 11 33 28 77 73 17 78 39 68 17 57 <br />91 71 52 38 17 14 91 43 58 50 27 29 48 <br />63 66 04 68 89 53 67 30 73 16 69 87 40 31 <br />04 62 98 27 23 09 70 98 73 93 38 53 60 04 23 <br /></p><p>NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)</p><h3 id=\"solution\">Solution</h3><pre><code>a=[[75],[95,64],[17,47,82],[18,35,87,10],[20,4,82,47,65],[19,1,23,75,3,34],[88,2,77,73,7,63,67],[99,65,4,28,6,16,70,92],[41,41,26,56,83,40,80,70,33],[41,48,72,33,47,32,37,16,94,29],[53,71,44,65,25,43,91,52,97,51,14],[70,11,33,28,77,73,17,78,39,68,17,57],[91,71,52,38,17,14,91,43,58,50,27,29,48],[63,66,4,68,89,53,67,30,73,16,69,87,40,31],[4,62,98,27,23,9,70,98,73,93,38,53,60,4,23]]for x in range(len(a)-1,-1,-1):    for y in range(0,x):         a[x-1][y]+=max(a[x][y],a[x][y+1])print (a[0][0])</code></pre><p><strong>Output</strong></p><pre><code>1074</code></pre>",
            "url": "http://localhost:4000/problem-18",
            
            
            
            
            
            "date_published": "2020-06-29T00:00:00+05:30",
            "date_modified": "2020-06-29T00:00:00+05:30",
            
                "author":  {
                "name": "Ayan Bag",
                "url": "https://ayanbag.com",
                "avatar": null
                }
                
            
        }
    
    ]
}