<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Euler Decode</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2020-08-02T23:26:02+05:30</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Ayan Bag</name>
   <email>info@ayanbag.com</email>
 </author>

 
 <entry>
   <title>Consecutive prime sum</title>
   <link href="http://localhost:4000/problem-50"/>
   <updated>2020-07-20T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-50</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The prime 41, can be written as the sum of six consecutive primes:&lt;/p&gt;

&lt;p&gt;41 = 2 + 3 + 5 + 7 + 11 + 13&lt;/p&gt;

&lt;p&gt;This is the longest sum of consecutive primes that adds to a prime below one-hundred.&lt;/p&gt;

&lt;p&gt;The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.&lt;/p&gt;

&lt;p&gt;Which prime, below one-million, can be written as the sum of the most consecutive primes?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def sieve(n):
    is_prime = [True]*n
    is_prime[0] = False
    is_prime[1] = False
    is_prime[2] = True
    for i in range(3,int(n**0.5+1),2):
        index = i*2
        while index &amp;lt; n:
            is_prime[index] = False
            index = index+i
    prime = [2]
    for i in range(3,n,2):
        if is_prime[i]:
            prime.append(i)
    return prime

prime=sieve(10**6)
val=0
lastj=len(prime)
l=0
for i in range(len(prime)):
    for j in range(i+l, lastj):
        sol = sum(prime[i:j])
        if sol &amp;lt; 1000000:
            if sol in prime:
                l = j-i
                val = sol
        else:
            lastj = j+1
            break

print(val)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;997651
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Prime permutations</title>
   <link href="http://localhost:4000/problem-49"/>
   <updated>2020-07-20T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-49</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.&lt;/p&gt;

&lt;p&gt;There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.&lt;/p&gt;

&lt;p&gt;What 12-digit number do you form by concatenating the three terms in this sequence?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from itertools import permutations


def sieve(n):
    is_prime = [True]*n
    is_prime[0] = False
    is_prime[1] = False
    is_prime[2] = True
    for i in range(3,int(n**0.5+1),2):
        index = i*2
        while index &amp;lt; n:
            is_prime[index] = False
            index = index+i
    prime = [2]
    for i in range(3,n,2):
        if is_prime[i]:
            prime.append(i)
    return prime

prime=sieve(10000)
primes = [x for x in prime if x &amp;gt; 1487]

def create(b):
    for i in range(len(b)):
        for j in range(i+1, len(b)):
            difference = b[j] - b[i]
            if b[j] + difference in b:
                return str(b[i])+str(b[j])+str(b[j]+difference)
    return False

for i in primes:
    p = permutations(str(i))
    a = [int(''.join(x)) for x in p]
    a = list(set([x for x in a if x in primes]))
    a.sort()
    if len(a) &amp;gt;= 3:
        if create(a):
            print (create(a))
            break
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;296962999629
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Self powers</title>
   <link href="http://localhost:4000/problem-48"/>
   <updated>2020-07-20T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-48</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The series, 1&lt;sup&gt;1&lt;/sup&gt; + 2&lt;sup&gt;2&lt;/sup&gt; + 3&lt;sup&gt;3&lt;/sup&gt; + … + 10&lt;sup&gt;10&lt;/sup&gt; = 10405071317.&lt;/p&gt;

&lt;p&gt;Find the last ten digits of the series, 1&lt;sup&gt;1&lt;/sup&gt; + 2&lt;sup&gt;2&lt;/sup&gt; + 3&lt;sup&gt;3&lt;/sup&gt; + … + 1000&lt;sup&gt;1000&lt;/sup&gt;.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sum1=0

for i in range(1,1000+1):
    sum1=sum1+(i**i)

val=str(sum1)
val=val[::-1]

print(int(val[0:10][::-1]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;9110846700
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Distinct primes factors</title>
   <link href="http://localhost:4000/problem-47"/>
   <updated>2020-07-20T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-47</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The first two consecutive numbers to have two distinct prime factors are:&lt;/p&gt;

&lt;p&gt;14 = 2 × 7 &lt;br /&gt;
15 = 3 × 5&lt;/p&gt;

&lt;p&gt;The first three consecutive numbers to have three distinct prime factors are:&lt;/p&gt;

&lt;p&gt;644 = 2&lt;sup&gt;2&lt;/sup&gt; × 7 × 23 &lt;br /&gt;
645 = 3 × 5 × 43 &lt;br /&gt; 
646 = 2 × 17 × 19 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def primefactor(number):
    i = 2
    a = set()
    while i &amp;lt; number**0.5 or number == 1:
        if number % i == 0:
            number = number/i
            a.add(i)
            i -= 1
        i += 1
    return (len(a)+1)

j = 2*3*5*7

while True:
    if primefactor(j) == 4:
        j += 1
        if primefactor(j) == 4:
            j += 1
            if primefactor(j) == 4:
                j += 1
                if primefactor(j) == 4:
                    print (j-3)
                    break
    j += 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;134043
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Goldbach's other conjecture</title>
   <link href="http://localhost:4000/problem-46"/>
   <updated>2020-07-20T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-46</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.&lt;/p&gt;

&lt;p&gt;9 = 7 + 2×1&lt;sup&gt;2&lt;/sup&gt; &lt;br /&gt;
15 = 7 + 2×2&lt;sup&gt;2&lt;/sup&gt; &lt;br /&gt;
21 = 3 + 2×3&lt;sup&gt;2&lt;/sup&gt; &lt;br /&gt;
25 = 7 + 2×3&lt;sup&gt;2&lt;/sup&gt; &lt;br /&gt;
27 = 19 + 2×2&lt;sup&gt;2&lt;/sup&gt; &lt;br /&gt;
33 = 31 + 2×1&lt;sup&gt;2&lt;/sup&gt; \&lt;/p&gt;

&lt;p&gt;It turns out that the conjecture was false.&lt;/p&gt;

&lt;p&gt;What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from math import sqrt

def isprime(x):
    if x%2==0:
        return False
    else:
        for i in range(3, int(x**0.5+1),2):
            if x % i == 0:
                return False
        return True

number=3
prime=[2]

flag=True

while flag:
    if isprime(number): prime.append(number)
    else:
        for i in prime:
            if sqrt(((number-i)/2)) == int(sqrt(((number-i)/2))):
                break
        else:
            print(number)
            break
    number=number+2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5777
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Triangular, pentagonal, and hexagonal</title>
   <link href="http://localhost:4000/problem-45"/>
   <updated>2020-07-20T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-45</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:&lt;/p&gt;

&lt;p&gt;Triangle:	 	T&lt;sub&gt;n&lt;/sub&gt;=n(n+1)/2	 	1, 3, 6, 10, 15, … &lt;br /&gt;
Pentagonal:	 	P&lt;sub&gt;n&lt;/sub&gt;=n(3n−1)/2	 	1, 5, 12, 22, 35, … &lt;br /&gt;
Hexagonal:	 	H&lt;sub&gt;n&lt;/sub&gt;=n(2n−1)	 	1, 6, 15, 28, 45, … &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It can be verified that T&lt;sub&gt;285&lt;/sub&gt; = P&lt;sub&gt;165&lt;/sub&gt; = H&lt;sub&gt;143&lt;/sub&gt; = 40755.&lt;/p&gt;

&lt;p&gt;Find the next triangle number that is also pentagonal and hexagonal.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def pentagonal(n):
    if (1+(24*n+1)**0.5) % 6 == 0:
        return True
    return False

def hexagonal(n):
    if (1+(8*n+1)**0.5)%4 == 0:
        return True
    return False


flag =True

while flag:
    for i in range(1,10**6):
        a=int(i*(i+1)/2)
        if hexagonal(a) and pentagonal(a):
            if a &amp;gt; 40755: 
                print(a)
                flag=False
                break
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1533776805
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Pentagon numbers</title>
   <link href="http://localhost:4000/problem-44"/>
   <updated>2020-07-20T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-44</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Pentagonal numbers are generated by the formula, P&lt;sub&gt;n&lt;/sub&gt;=n(3n−1)/2. The first ten pentagonal numbers are:&lt;/p&gt;

\[1, \ 5, \ 12, \ 22, \ 35, \ 51, \ 70, \ 92, \ 117, \ 145, \ ...\]

&lt;p&gt;It can be seen that P&lt;sub&gt;4&lt;/sub&gt; + P&lt;sub&gt;7&lt;/sub&gt; = 22 + 70 = 92 = P&lt;sub&gt;8&lt;/sub&gt;. However, their difference, 70 − 22 = 48, is not pentagonal.&lt;/p&gt;

&lt;p&gt;Find the pair of pentagonal numbers, P&lt;sub&gt;j&lt;/sub&gt; and P&lt;sub&gt;k&lt;/sub&gt;, for which their sum and difference are pentagonal and D = mod(P&lt;sub&gt;k&lt;/sub&gt; − P&lt;sub&gt;j&lt;/sub&gt;) is minimised; what is the value of D?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def pentagonal(n):
    if (1+(24*n+1)**0.5) % 6 == 0:
        return True
    return False

flag = True

i = 1

while flag:
    for j in range(1, i):
        a = i*(3*i-1)/2
        b = j*(3*j-1)/2
        if pentagonal(a+b) and pentagonal(a-b):
            print (a-b)
            flag = False
            break
    i += 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5482660
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Sub-string divisibility</title>
   <link href="http://localhost:4000/problem-43"/>
   <updated>2020-07-20T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-43</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.&lt;/p&gt;

&lt;p&gt;Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;d&lt;sub&gt;2&lt;/sub&gt;d&lt;sub&gt;3&lt;/sub&gt;d&lt;sub&gt;4&lt;/sub&gt;=406 is divisible by 2&lt;/li&gt;
  &lt;li&gt;d&lt;sub&gt;3&lt;/sub&gt;d&lt;sub&gt;4&lt;/sub&gt;d&lt;sub&gt;5&lt;/sub&gt;=063 is divisible by 3&lt;/li&gt;
  &lt;li&gt;d&lt;sub&gt;4&lt;/sub&gt;d&lt;sub&gt;5&lt;/sub&gt;d&lt;sub&gt;6&lt;/sub&gt;=635 is divisible by 5&lt;/li&gt;
  &lt;li&gt;d&lt;sub&gt;5&lt;/sub&gt;d&lt;sub&gt;6&lt;/sub&gt;d&lt;sub&gt;7&lt;/sub&gt;=357 is divisible by 7&lt;/li&gt;
  &lt;li&gt;d&lt;sub&gt;6&lt;/sub&gt;d&lt;sub&gt;7&lt;/sub&gt;d&lt;sub&gt;8&lt;/sub&gt;=572 is divisible by 11&lt;/li&gt;
  &lt;li&gt;d&lt;sub&gt;7&lt;/sub&gt;d&lt;sub&gt;8&lt;/sub&gt;d&lt;sub&gt;9&lt;/sub&gt;=728 is divisible by 13&lt;/li&gt;
  &lt;li&gt;d&lt;sub&gt;8&lt;/sub&gt;d&lt;sub&gt;9&lt;/sub&gt;d&lt;sub&gt;10&lt;/sub&gt;=289 is divisible by 17&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find the sum of all 0 to 9 pandigital numbers with this property.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from itertools import permutations

a='1234567890'
p=permutations(a[:10])
sum1=0
for i in p:
    if i[0]!='0':
        temp=''.join(list(i))
        if int(temp[1:4])%2==0 and int(temp[2:5])%3==0 and int(temp[3:6])%5==0 and int(temp[4:7])%7==0 and int(temp[5:8])%11==0 and int(temp[6:9])%13==0 and int(temp[7:10])%17==0:
            sum1=sum1+int(temp)
print(sum1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;16695334890
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Coded triangle numbers</title>
   <link href="http://localhost:4000/problem-42"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-42</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:&lt;/p&gt;

&lt;p&gt;1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …&lt;/p&gt;

&lt;p&gt;By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;https://projecteuler.net/project/resources/p042_words.txt&quot;&gt;words.txt&lt;/a&gt;, a 16K text file containing nearly two-thousand common English words, how many are triangle words?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;name=[]
with open('words.txt','r') as file: 
    for line in file: 
        for word in line.split(','): 
            word=word.strip('&quot;')
            name.append(word) 


val=dict()
temp=1
for i in range(65,91):
    val[chr(i)] = temp
    temp+=1

def tvalue():
    val1=[]
    for n in range(1,26*10):
        tmp=int((n+1)*n*0.5)
        val1.append(tmp)
    return val1
t=tvalue()

count=0
for i in name:
    s=0
    for j in i:
        s=s+val[j]
    if s in t:
        count=count+1

print(count)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;162
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Pandigital prime</title>
   <link href="http://localhost:4000/problem-41"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-41</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.&lt;/p&gt;

&lt;p&gt;What is the largest n-digit pandigital prime that exists?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import itertools

def isprime(n):
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True


a='123456789'
j=9
flag=True

while flag:
    z=itertools.permutations(a[:j])
    z = list(z)[::-1]
    for i in z:
        if int(i[j-1]) % 2 != 0:
            number = int(''.join(i))
            if (number+1) % 6 == 0 or (number-1) % 6 == 0: 
                if isprime(number):
                    print (number)
                    flag = False
                    break
    j -= 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;7652413
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Champernowne's constant</title>
   <link href="http://localhost:4000/problem-40"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-40</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;An irrational decimal fraction is created by concatenating the positive integers:&lt;/p&gt;

&lt;p&gt;0.12345678910&lt;strong&gt;1&lt;/strong&gt;112131415161718192021…&lt;/p&gt;

&lt;p&gt;It can be seen that the 12&lt;sup&gt;th&lt;/sup&gt; digit of the fractional part is 1.&lt;/p&gt;

&lt;p&gt;If dn represents the nth digit of the fractional part, find the value of the following expression.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;d&lt;sub&gt;1&lt;/sub&gt; × d&lt;sub&gt;10&lt;/sub&gt; × d&lt;sub&gt;100&lt;/sub&gt; × d&lt;sub&gt;1000&lt;/sub&gt; × d&lt;sub&gt;10000&lt;/sub&gt; × d&lt;sub&gt;100000&lt;/sub&gt; × d&lt;sub&gt;1000000&lt;/sub&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;number=&quot;&quot;
for i in range(1,10**6+1):
    number=number+str(i)

r =int(number[1-1]) * int(number[10-1]) * int(number[100-1]) * int(number[1000-1]) *
 int(number[10000-1]) * int(number[100000-1]) * int(number[1000000-1])

print(r)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;210
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Integer right triangles</title>
   <link href="http://localhost:4000/problem-39"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-39</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.&lt;/p&gt;

&lt;p&gt;{20,48,52}, {24,45,51}, {30,40,50}&lt;/p&gt;

&lt;p&gt;For which value of p ≤ 1000, is the number of solutions maximised?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def triplets(p):
    val=[]
    for a in range(1,p):
        b=int((p*(p-2*a))/(2*(p-a)))
        c=p-a-b
        if (a*a+b*b)==c*c and a+b&amp;gt;c and b&amp;gt;a:
            val.append([a,b,c])
    return val

val2=[]
temp=[]
for p in range(3,1001):
    temp=triplets(p)
    if len(temp)&amp;gt;len(val2):
        val2=temp
        peri = p

print(peri)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;840
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Pandigital multiples</title>
   <link href="http://localhost:4000/problem-38"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-38</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Take the number 192 and multiply it by each of 1, 2, and 3:&lt;/p&gt;

&lt;p&gt;192 × 1 = 192 &lt;br /&gt;
192 × 2 = 384 &lt;br /&gt;
192 × 3 = 576&lt;/p&gt;

&lt;p&gt;By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)&lt;/p&gt;

&lt;p&gt;The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).&lt;/p&gt;

&lt;p&gt;What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, … , n) where n &amp;gt; 1?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;largest = 0
for i in range(1,10000):
	
	multiplication = ''
	
	integer = 1
	
	while len(multiplication) &amp;lt; 9:
		
		multiplication += str(i*integer)
		
		integer += 1
		
	if ((len(multiplication) == 9) and (len(set(multiplication)) == 9) 
		and ('0' not in multiplication)):
	
		if int(multiplication) &amp;gt; largest:
			largest = int(multiplication)

print (largest)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;932718654
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Double-base palindromes</title>
   <link href="http://localhost:4000/problem-36"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-36</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The decimal number, 585 = 1001001001&lt;sub&gt;2&lt;/sub&gt;(binary), is palindromic in both bases.&lt;/p&gt;

&lt;p&gt;Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.&lt;/p&gt;

&lt;p&gt;(Please note that the palindromic number, in either base, may not include leading zeros.)&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def decimalToBinary(n):  
    return bin(n).replace(&quot;0b&quot;, &quot;&quot;)  

def palindrome(x):
    if x==x[::-1]:
        return True
sum1=0  
for i in range(1,10**6):
    if palindrome(str(i)):
        if palindrome(str(decimalToBinary(i))):
            sum1=sum1+i
            
print(sum1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;872187
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Circular primes</title>
   <link href="http://localhost:4000/problem-35"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-35</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.&lt;/p&gt;

&lt;p&gt;There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.&lt;/p&gt;

&lt;p&gt;How many circular primes are there below one million?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def sieve(n):
	is_prime = [True]*n
	is_prime[0] = False
	is_prime[1] = False
	is_prime[2] = True
	for i in range(3,int(n**0.5+1),2):
		index = i*2
		while index &amp;lt; n:
			is_prime[index] = False
			index = index+i
	prime = [2]
	for i in range(3,n,2):
		if is_prime[i]:
			prime.append(i)
	return prime

primes = sieve(1000000)
counter = 0
for i in primes:
	flag = True
	number = i/10
	while number:
		if (number%10) % 2 == 0 or (number%10)%5 == 0:
			flag = False
			break
		number //= 10
	if flag:
		length = len(str(i))
		number = i
		counter += 1
		for j in range(length):
			number = (number%10)*10**(length-1)+number//10
			if number not in primes:
				counter -= 1
				break

print (counter)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;55
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Digit factorials</title>
   <link href="http://localhost:4000/problem-34"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-34</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.&lt;/p&gt;

&lt;p&gt;Find the sum of all numbers which are equal to the sum of the factorial of their digits.&lt;/p&gt;

&lt;p&gt;Note: as 1! = 1 and 2! = 2 are not sums they are not included.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def factorial(x):
    fact = 1  
    for i in range(1,x+1): 
        fact = fact * i 
    return fact

val=[]
for i in range(3,10**6):
    a=str(i)
    sum1=0
    
    for j in a:
        sum1=sum1+factorial(int(j))
    if int(a) == sum1 : 
        val.append(int(a))
    
print(sum(val))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;40730
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Pandigital products</title>
   <link href="http://localhost:4000/problem-32"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-32</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.&lt;/p&gt;

&lt;p&gt;The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.&lt;/p&gt;

&lt;p&gt;Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from collections import Counter
def pandigital(x):
    a=str(x)
    j=Counter(a)
    val=0
    for i in '123456789':
        if i in j:
            if j[i]==1:
                val=val+1
    if val==9:
        return True
    return False

p = set()
for i in range(2,  60):
    start = 1234 if i &amp;lt; 10 else 123 
    for j in range(start, 10000//i):
        if pandigital(str(i) + str(j) + str(i*j)): p.add(i*j)

print(sum(p))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;45228
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Coin sums</title>
   <link href="http://localhost:4000/problem-31"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-31</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:&lt;/p&gt;

&lt;p&gt;1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).&lt;/p&gt;

&lt;p&gt;It is possible to make £2 in the following way:&lt;/p&gt;

&lt;p&gt;1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p&lt;/p&gt;

&lt;p&gt;How many different ways can £2 be made using any number of coins?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;coins = [1, 2, 5, 10, 20, 50, 100, 200]
ways = [1] + [0]*200

for coin in coins:
    for i in range(coin,201):
        ways[i] += ways[i-coin]
print(ways[200])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;73682
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Digit fifth powers</title>
   <link href="http://localhost:4000/problem-30"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-30</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:&lt;/p&gt;

&lt;p&gt;1634 = 1&lt;sup&gt;4&lt;/sup&gt; + 6&lt;sup&gt;4&lt;/sup&gt; + 3&lt;sup&gt;4&lt;/sup&gt; + 4&lt;sup&gt;4&lt;/sup&gt; &lt;br /&gt;
8208 = 8&lt;sup&gt;4&lt;/sup&gt; + 2&lt;sup&gt;4&lt;/sup&gt; + 0&lt;sup&gt;4&lt;/sup&gt; + 8&lt;sup&gt;4&lt;/sup&gt; &lt;br /&gt;
9474 = 9&lt;sup&gt;4&lt;/sup&gt; + 4&lt;sup&gt;4&lt;/sup&gt; + 7&lt;sup&gt;4&lt;/sup&gt; + 4&lt;sup&gt;4&lt;/sup&gt; &lt;br /&gt;
As 1 = 1&lt;sup&gt;4&lt;/sup&gt; is not a sum it is not included.&lt;/p&gt;

&lt;p&gt;The sum of these numbers is 1634 + 8208 + 9474 = 19316.&lt;/p&gt;

&lt;p&gt;Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;final=[]
for a in range(2,355000):
    s=list(str(a))
    temp=0
    for i in s:
        temp=temp+int(i)**5
    if temp==a:
        final.append(temp)
    
print(sum(final))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;443839
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Distinct powers</title>
   <link href="http://localhost:4000/problem-29"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-29</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:&lt;/p&gt;

&lt;p&gt;2&lt;sup&gt;2&lt;/sup&gt;=4, 2&lt;sup&gt;3&lt;/sup&gt;=8, 2&lt;sup&gt;4&lt;/sup&gt;=16, 2&lt;sup&gt;5&lt;/sup&gt;=32 &lt;br /&gt;
3&lt;sup&gt;2&lt;/sup&gt;=9, 3&lt;sup&gt;3&lt;/sup&gt;=27, 3&lt;sup&gt;4&lt;/sup&gt;=81, 3&lt;sup&gt;5&lt;/sup&gt;=243 &lt;br /&gt;
4&lt;sup&gt;2&lt;/sup&gt;=16, 4&lt;sup&gt;3&lt;/sup&gt;=64, 4&lt;sup&gt;4&lt;/sup&gt;=256, 4&lt;sup&gt;5&lt;/sup&gt;=1024 &lt;br /&gt;
5&lt;sup&gt;2&lt;/sup&gt;=25, 5&lt;sup&gt;3&lt;/sup&gt;=125, 5&lt;sup&gt;4&lt;/sup&gt;=625, 5&lt;sup&gt;5&lt;/sup&gt;=3125 \&lt;/p&gt;

&lt;p&gt;If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:&lt;/p&gt;

&lt;p&gt;4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125&lt;/p&gt;

&lt;p&gt;How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;total=[]
for a in range(2,101):
    for b in range(2,101):
        total.append(a**b)
        
total1=set(total)
print(len(total1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;9183
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Number spiral diagonals</title>
   <link href="http://localhost:4000/problem-28"/>
   <updated>2020-07-16T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-28</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:&lt;/p&gt;

\[\\ 21 \ \ 22 \ \ 23 \ \ 24 \ \ 25 
\\ 20 \ \ \ 7 \ \ \ 8 \ \ \ 9 \ \ \ 10 
\\ 19 \ \ \ 6 \ \ \ 1 \ \ \ 2 \ \ \ 11 
\\ 18 \ \ \ 5 \ \ \ 4 \ \ \ 3 \ \ \ 12 
\\ 17 \ \ 16 \ \ 15 \ \ 14 \ \ 13\]

&lt;p&gt;It can be verified that the sum of the numbers on the diagonals is 101.&lt;/p&gt;

&lt;p&gt;What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def printSpiral(n) : 
    val=[]
    for i in range(0, n) : 
        for j in range(0, n) : 
              
            x = min(min(i, j), min(n - 1 - i, n - 1 - j)) 
              
            if (i &amp;lt;= j) : 
                q=(n - 2 * x) * (n - 2 * x) - (i - x)- (j - x)
                val.append(q)
  
            else : 
                q=((n - 2 * x - 2) *
                       (n - 2 * x - 2) +
                       (i - x) + (j - x))
                val.append(q)
                
    return val 
          
n = 1001
final=[]
sum1=0
sum2=0
j=0
val=[] 

val = printSpiral(n)

for i in range(0,len(val),n):
    final.append(val[i:i+n][::-1])

for i in range(len(final)):
    sum1+=final[i][i]
for i in range(len(final)):
    sum2+=final[i][len(final[i])-j-1]
    j=j+1
    
print(sum1+sum2-final[len(final)//2][len(final[0])//2])

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;669171001
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Reciprocal cycles</title>
   <link href="http://localhost:4000/problem-26"/>
   <updated>2020-07-15T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-26</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:&lt;/p&gt;

\[1/2	= 	0.5 \\ 
1/3	= 	0.(3) \\
1/4	= 	0.25 \\
1/5	= 	0.2 \\
1/6	= 	0.1(6) \\
1/7	= 	0.(142857) \\
1/8	= 	0.125 \\
1/9	= 	0.(1) \\
1/10 = 	0.1 \\\]

&lt;p&gt;Where 0.1(6) means 0.166666…, and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.&lt;/p&gt;

&lt;p&gt;Find the value of d &amp;lt; 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def divide(n,d,p):
    i = 0 
    remainders = set() 
    
    while i &amp;lt; p:
        if n &amp;lt; d:
            n = n * 10 
        
        n = n % d 
        if n in remainders: 
            return(d,i) 
        else:
            remainders.add(n) 
        
        i = i + 1 
    
longest = [0,0]
largest_denominator = 1000
for x in range(2,largest_denominator + 1):
  y = divide(1,x,x) 
  if y[1] &amp;gt; longest[1]:
    longest = y
print(longest[0])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;983
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>1000-digit Fibonacci number</title>
   <link href="http://localhost:4000/problem-25"/>
   <updated>2020-06-29T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-25</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The Fibonacci sequence is defined by the recurrence relation:&lt;/p&gt;

&lt;p&gt;F&lt;sub&gt;n&lt;/sub&gt; = F&lt;sub&gt;n−1&lt;/sub&gt; + F&lt;sub&gt;n−2&lt;/sub&gt;, where F&lt;sub&gt;1&lt;/sub&gt; = 1 and F&lt;sub&gt;2&lt;/sub&gt; = 1.&lt;/p&gt;

&lt;p&gt;Hence the first 12 terms will be:&lt;/p&gt;

&lt;p&gt;F&lt;sub&gt;1&lt;/sub&gt; = 1 &lt;br /&gt;
F&lt;sub&gt;2&lt;/sub&gt; = 1 &lt;br /&gt;
F&lt;sub&gt;3&lt;/sub&gt; = 2 &lt;br /&gt;
F&lt;sub&gt;4&lt;/sub&gt; = 3 &lt;br /&gt;
F&lt;sub&gt;5&lt;/sub&gt; = 5 &lt;br /&gt;
F&lt;sub&gt;6&lt;/sub&gt; = 8 &lt;br /&gt;
F&lt;sub&gt;7&lt;/sub&gt; = 13 &lt;br /&gt;
F&lt;sub&gt;8&lt;/sub&gt; = 21 &lt;br /&gt;
F&lt;sub&gt;9&lt;/sub&gt; = 34 &lt;br /&gt;
F&lt;sub&gt;10&lt;/sub&gt; = 55 &lt;br /&gt;
F&lt;sub&gt;11&lt;/sub&gt; = 89 &lt;br /&gt;
F&lt;sub&gt;12&lt;/sub&gt; = 144 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The 12th term, F&lt;sub&gt;12&lt;/sub&gt;, is the first term to contain three digits.&lt;/p&gt;

&lt;p&gt;What is the index of the first term in the Fibonacci sequence to contain 1000 digits?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def fibonacci():
    g=0
    i=2
    l=[1,1]
    while(g&amp;lt;1000):
        temp=l[i-1]+l[i-2]
        l.append(temp)
        g=len(str(temp))
        index=i
        i=i+1
        
    return index+1


print(fibonacci())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4782
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Lexicographic permutations</title>
   <link href="http://localhost:4000/problem-24"/>
   <updated>2020-06-29T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-24</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:&lt;/p&gt;

\[012 \ 021 \ 102 \ 120 \ 201 \ 210\]

&lt;p&gt;What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from itertools import permutations
perms = [''.join(p) for p in permutations('0123456789')]
prm=sorted(perms)
print(prm[10**6-1]) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2783915460
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Names scores</title>
   <link href="http://localhost:4000/problem-22"/>
   <updated>2020-06-29T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-22</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Using &lt;a href=&quot;https://projecteuler.net/project/resources/p022_names.txt&quot;&gt;name.txt&lt;/a&gt;, a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.&lt;/p&gt;

&lt;p&gt;For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.&lt;/p&gt;

&lt;p&gt;What is the total of all the name scores in the file?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;name=[]
with open('name.txt','r') as file: 
    for line in file: 
        for word in line.split(','): 
            word=word.strip('&quot;')
            name.append(word) 

name=sorted(name)
total=0
val=dict()
j=1
for i in range(65,91):
    val[chr(i)]=j;
    j=j+1

for x in name:
    temp=0
    for j in x:
        temp+=val[j]

    total+=((name.index(x)+1)*temp)

print(total)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;871198282
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Amicable numbers</title>
   <link href="http://localhost:4000/problem-21"/>
   <updated>2020-06-29T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-21</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.&lt;/p&gt;

&lt;p&gt;For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.&lt;/p&gt;

&lt;p&gt;Evaluate the sum of all the amicable numbers under 10000.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def divisor(x):
    lt=[]
    for i in range(1,x):
        if x%i==0:
            lt.append(i)
    return lt
def d(s):
    return sum(divisor(s))
am_num=[]

for i in range(1,10000+1):
    a=d(i)
    b=d(a)

    if b==i and a!=i:
        am_num.append(i)

print (sum(am_num))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;31626
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Factorial digit sum</title>
   <link href="http://localhost:4000/problem-20"/>
   <updated>2020-06-29T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-20</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;n! means n × (n − 1) × … × 3 × 2 × 1&lt;/p&gt;

&lt;p&gt;For example, 10! = 10 × 9 × … × 3 × 2 × 1 = 3628800,
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.&lt;/p&gt;

&lt;p&gt;Find the sum of the digits in the number 100!&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from math import factorial

a=list(str(factorial(100)))

sum=0
for i in a:
    sum+=int(i)

print(sum)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;648
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Counting Sundays</title>
   <link href="http://localhost:4000/problem-19"/>
   <updated>2020-06-29T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-19</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;You are given the following information, but you may prefer to do some research for yourself.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 Jan 1900 was a Monday.&lt;/li&gt;
  &lt;li&gt;Thirty days has September, April, June and November. All the rest have thirty-one, Saving February alone, Which has twenty-eight, rain or shine. And on leap years, twenty-nine.&lt;/li&gt;
  &lt;li&gt;A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from datetime import *

counter = 0
year = 1901
month = 1

curr_day = date(year,month,1)

while(curr_day.year &amp;lt; 2001):
	if(curr_day.weekday() == 6):
		counter += 1
	if(month+1 == 13):
		month = 1
		year += 1
	else:
		month += 1
	curr_day = date(year,month,1)

print(str(counter))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;171
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Maximum path sum I</title>
   <link href="http://localhost:4000/problem-18"/>
   <updated>2020-06-29T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-18</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;7&lt;/strong&gt; 4 &lt;br /&gt;
2 &lt;strong&gt;4&lt;/strong&gt; 6 &lt;br /&gt;
8 5 &lt;strong&gt;9&lt;/strong&gt; 3 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;That is, 3 + 7 + 4 + 9 = 23.&lt;/p&gt;

&lt;p&gt;Find the maximum total from top to bottom of the triangle below:&lt;/p&gt;

&lt;p&gt;75 &lt;br /&gt;
95 64 &lt;br /&gt;
17 47 82 &lt;br /&gt;
18 35 87 10 &lt;br /&gt;
20 04 82 47 65 &lt;br /&gt;
19 01 23 75 03 34 &lt;br /&gt;
88 02 77 73 07 63 67 &lt;br /&gt;
99 65 04 28 06 16 70 92 &lt;br /&gt;
41 41 26 56 83 40 80 70 33 &lt;br /&gt;
41 48 72 33 47 32 37 16 94 29 &lt;br /&gt;
53 71 44 65 25 43 91 52 97 51 14 &lt;br /&gt;
70 11 33 28 77 73 17 78 39 68 17 57 &lt;br /&gt;
91 71 52 38 17 14 91 43 58 50 27 29 48 &lt;br /&gt;
63 66 04 68 89 53 67 30 73 16 69 87 40 31 &lt;br /&gt;
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;a=[
[75],
[95,64],
[17,47,82],
[18,35,87,10],
[20,4,82,47,65],
[19,1,23,75,3,34],
[88,2,77,73,7,63,67],
[99,65,4,28,6,16,70,92],
[41,41,26,56,83,40,80,70,33],
[41,48,72,33,47,32,37,16,94,29],
[53,71,44,65,25,43,91,52,97,51,14],
[70,11,33,28,77,73,17,78,39,68,17,57],
[91,71,52,38,17,14,91,43,58,50,27,29,48],
[63,66,4,68,89,53,67,30,73,16,69,87,40,31],
[4,62,98,27,23,9,70,98,73,93,38,53,60,4,23]]

for x in range(len(a)-1,-1,-1):
    for y in range(0,x): 
        a[x-1][y]+=max(a[x][y],a[x][y+1])
print (a[0][0])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1074
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Number letter counts</title>
   <link href="http://localhost:4000/problem-17"/>
   <updated>2020-06-29T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-17</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.&lt;/p&gt;

&lt;p&gt;If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of “and” when writing out numbers is in compliance with British usage.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;units = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 
'eleven', 'twelve' , 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 
'nineteen']

tens = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']

other = ['hundred', 'thousand', 'and']

result = 0

for i in range (1, 1001):
  
    unit = i% 10
    ten = (i // 10)% 10
    hundred = (i // 100)% 10
    thousand = (i // 1000)% 10
   
    if thousand != 0:
        result += len (units [0]) + len (other [1])
    if i% 1000 != 0:
        if hundred != 0:
            result += len (units [hundred-1]) + len (other [0])
            if i% 100 != 0:
                result += len (other [2])
        if i% 100 != 0:
            if ten &amp;lt;2:
                result += len (units [i% 100-1])
            else:
                result += len (tens [ten-2])
                if unit != 0:
                    result += len (units [unit-1])
print (result)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;21124
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Power digit sum</title>
   <link href="http://localhost:4000/problem-16"/>
   <updated>2020-06-29T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-16</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;2&lt;sup&gt;15&lt;/sup&gt; = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.&lt;/p&gt;

&lt;p&gt;What is the sum of the digits of the number 2&lt;sup&gt;1000&lt;/sup&gt;?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;a = str(2**1000)

lt=list(a)
sum1=0
for i in lt:
    sum1=sum1+int(i)

print(sum1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1366
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Lattice paths</title>
   <link href="http://localhost:4000/problem-15"/>
   <updated>2020-06-27T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-15</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/p1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How many such routes are there through a 20×20 grid?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def paths(n,k):
    from math import factorial,sqrt
    return int(factorial(n)/(factorial(k)*factorial(n-k)))

print(paths(20+20,20))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;137846528820
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Longest Collatz sequence</title>
   <link href="http://localhost:4000/problem-14"/>
   <updated>2020-06-27T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-14</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The following iterative sequence is defined for the set of positive integers:&lt;/p&gt;

\[n → n/2 \ (n \ is \ even)
\\ n → 3n + 1 \ (n \ is \ odd)\]

&lt;p&gt;Using the rule above and starting with 13, we generate the following sequence:&lt;/p&gt;

\[13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1\]

&lt;p&gt;It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.&lt;/p&gt;

&lt;p&gt;Which starting number, under one million, produces the longest chain?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: Once the chain starts the terms are allowed to go above one million.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;max1=0
val=0
for i in range(2,10**6+1):
    n=i
    lt=[]
    while n&amp;gt;1:
        if n%2==0:
            n=n//2
        else:
            n=3*n+1
        lt.append(n)
    
    if len(lt)&amp;gt;max1:
        max1=len(lt)
        val=i

print(val)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;837799
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Large Sum</title>
   <link href="http://localhost:4000/problem-13"/>
   <updated>2020-06-27T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-13</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.&lt;/p&gt;

&lt;p&gt;37107287533902102798797998220837590246510135740250 &lt;br /&gt;
46376937677490009712648124896970078050417018260538 &lt;br /&gt;
74324986199524741059474233309513058123726617309629 &lt;br /&gt;
91942213363574161572522430563301811072406154908250 &lt;br /&gt;
23067588207539346171171980310421047513778063246676 &lt;br /&gt;
89261670696623633820136378418383684178734361726757 &lt;br /&gt;
28112879812849979408065481931592621691275889832738 &lt;br /&gt;
44274228917432520321923589422876796487670272189318 &lt;br /&gt;
47451445736001306439091167216856844588711603153276 &lt;br /&gt;
70386486105843025439939619828917593665686757934951 &lt;br /&gt;
62176457141856560629502157223196586755079324193331 &lt;br /&gt;
64906352462741904929101432445813822663347944758178 &lt;br /&gt;
92575867718337217661963751590579239728245598838407 &lt;br /&gt;
58203565325359399008402633568948830189458628227828 &lt;br /&gt;
58203565325359399008402633568948830189458628227828 &lt;br /&gt;
80181199384826282014278194139940567587151170094390 &lt;br /&gt;
35398664372827112653829987240784473053190104293586 &lt;br /&gt;
86515506006295864861532075273371959191420517255829 &lt;br /&gt;
71693888707715466499115593487603532921714970056938 &lt;br /&gt;
54370070576826684624621495650076471787294438377604 &lt;br /&gt;
53282654108756828443191190634694037855217779295145 &lt;br /&gt;
36123272525000296071075082563815656710885258350721 &lt;br /&gt;
45876576172410976447339110607218265236877223636045 &lt;br /&gt;
17423706905851860660448207621209813287860733969412 &lt;br /&gt;
81142660418086830619328460811191061556940512689692 &lt;br /&gt;
51934325451728388641918047049293215058642563049483 &lt;br /&gt;
62467221648435076201727918039944693004732956340691 &lt;br /&gt;
15732444386908125794514089057706229429197107928209 &lt;br /&gt;
55037687525678773091862540744969844508330393682126 &lt;br /&gt;
18336384825330154686196124348767681297534375946515 &lt;br /&gt;
80386287592878490201521685554828717201219257766954 &lt;br /&gt;
78182833757993103614740356856449095527097864797581 &lt;br /&gt;
16726320100436897842553539920931837441497806860984 &lt;br /&gt;
48403098129077791799088218795327364475675590848030 &lt;br /&gt;
87086987551392711854517078544161852424320693150332 &lt;br /&gt;
59959406895756536782107074926966537676326235447210 &lt;br /&gt;
69793950679652694742597709739166693763042633987085 &lt;br /&gt;
41052684708299085211399427365734116182760315001271 &lt;br /&gt;
65378607361501080857009149939512557028198746004375 &lt;br /&gt;
35829035317434717326932123578154982629742552737307 &lt;br /&gt;
94953759765105305946966067683156574377167401875275 &lt;br /&gt;
88902802571733229619176668713819931811048770190271 &lt;br /&gt;
25267680276078003013678680992525463401061632866526 &lt;br /&gt;
36270218540497705585629946580636237993140746255962 &lt;br /&gt;
24074486908231174977792365466257246923322810917141 &lt;br /&gt;
91430288197103288597806669760892938638285025333403 &lt;br /&gt;
34413065578016127815921815005561868836468420090470 &lt;br /&gt;
23053081172816430487623791969842487255036638784583 &lt;br /&gt;
11487696932154902810424020138335124462181441773470 &lt;br /&gt;
63783299490636259666498587618221225225512486764533 &lt;br /&gt;
67720186971698544312419572409913959008952310058822 &lt;br /&gt;
95548255300263520781532296796249481641953868218774 &lt;br /&gt;
76085327132285723110424803456124867697064507995236 &lt;br /&gt;
37774242535411291684276865538926205024910326572967 &lt;br /&gt;
23701913275725675285653248258265463092207058596522 &lt;br /&gt;
29798860272258331913126375147341994889534765745501 &lt;br /&gt;
18495701454879288984856827726077713721403798879715 &lt;br /&gt;
38298203783031473527721580348144513491373226651381 &lt;br /&gt;
34829543829199918180278916522431027392251122869539 &lt;br /&gt;
40957953066405232632538044100059654939159879593635 &lt;br /&gt;
29746152185502371307642255121183693803580388584903 &lt;br /&gt;
41698116222072977186158236678424689157993532961922 &lt;br /&gt;
62467957194401269043877107275048102390895523597457 &lt;br /&gt;
23189706772547915061505504953922979530901129967519 &lt;br /&gt;
86188088225875314529584099251203829009407770775672 &lt;br /&gt;
11306739708304724483816533873502340845647058077308 &lt;br /&gt;
82959174767140363198008187129011875491310547126581 &lt;br /&gt;
97623331044818386269515456334926366572897563400500 &lt;br /&gt;
42846280183517070527831839425882145521227251250327 &lt;br /&gt;
55121603546981200581762165212827652751691296897789 &lt;br /&gt;
32238195734329339946437501907836945765883352399886 &lt;br /&gt;
75506164965184775180738168837861091527357929701337 &lt;br /&gt;
62177842752192623401942399639168044983993173312731 &lt;br /&gt;
32924185707147349566916674687634660915035914677504 &lt;br /&gt;
99518671430235219628894890102423325116913619626622 &lt;br /&gt;
73267460800591547471830798392868535206946944540724 &lt;br /&gt;
76841822524674417161514036427982273348055556214818 &lt;br /&gt;
97142617910342598647204516893989422179826088076852 &lt;br /&gt;
87783646182799346313767754307809363333018982642090 &lt;br /&gt;
10848802521674670883215120185883543223812876952786 &lt;br /&gt;
71329612474782464538636993009049310363619763878039 &lt;br /&gt;
62184073572399794223406235393808339651327408011116 &lt;br /&gt;
66627891981488087797941876876144230030984490851411 &lt;br /&gt;
60661826293682836764744779239180335110989069790714 &lt;br /&gt;
85786944089552990653640447425576083659976645795096 &lt;br /&gt;
66024396409905389607120198219976047599490197230297 &lt;br /&gt;
64913982680032973156037120041377903785566085089252 &lt;br /&gt;
16730939319872750275468906903707539413042652315011 &lt;br /&gt;
94809377245048795150954100921645863754710598436791 &lt;br /&gt;
78639167021187492431995700641917969777599028300699 &lt;br /&gt;
15368713711936614952811305876380278410754449733078 &lt;br /&gt;
40789923115535562561142322423255033685442488917353 &lt;br /&gt;
44889911501440648020369068063960672322193204149535 &lt;br /&gt;
41503128880339536053299340368006977710650566631954 &lt;br /&gt;
81234880673210146739058568557934581403627822703280 &lt;br /&gt;
82616570773948327592232845941706525094512325230608 &lt;br /&gt;
22918802058777319719839450180888072429661980811197 &lt;br /&gt;
77158542502016545090413245809786882778948721859617 &lt;br /&gt;
72107838435069186155435662884062257473692284509516 &lt;br /&gt;
20849603980134001723930671666823555245252804609722 &lt;br /&gt;
53503534226472524250874054075591789781264330331690 &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;a = [
37107287533902102798797998220837590246510135740250,
46376937677490009712648124896970078050417018260538,
74324986199524741059474233309513058123726617309629,
91942213363574161572522430563301811072406154908250,
23067588207539346171171980310421047513778063246676,
89261670696623633820136378418383684178734361726757,
28112879812849979408065481931592621691275889832738,
44274228917432520321923589422876796487670272189318,
47451445736001306439091167216856844588711603153276,
70386486105843025439939619828917593665686757934951,
62176457141856560629502157223196586755079324193331,
64906352462741904929101432445813822663347944758178,
92575867718337217661963751590579239728245598838407,
58203565325359399008402633568948830189458628227828,
80181199384826282014278194139940567587151170094390,
35398664372827112653829987240784473053190104293586,
86515506006295864861532075273371959191420517255829,
71693888707715466499115593487603532921714970056938,
54370070576826684624621495650076471787294438377604,
53282654108756828443191190634694037855217779295145,
36123272525000296071075082563815656710885258350721,
45876576172410976447339110607218265236877223636045,
17423706905851860660448207621209813287860733969412,
81142660418086830619328460811191061556940512689692,
51934325451728388641918047049293215058642563049483,
62467221648435076201727918039944693004732956340691,
15732444386908125794514089057706229429197107928209,
55037687525678773091862540744969844508330393682126,
18336384825330154686196124348767681297534375946515,
80386287592878490201521685554828717201219257766954,
78182833757993103614740356856449095527097864797581,
16726320100436897842553539920931837441497806860984,
48403098129077791799088218795327364475675590848030,
87086987551392711854517078544161852424320693150332,
59959406895756536782107074926966537676326235447210,
69793950679652694742597709739166693763042633987085,
41052684708299085211399427365734116182760315001271,
65378607361501080857009149939512557028198746004375,
35829035317434717326932123578154982629742552737307,
94953759765105305946966067683156574377167401875275,
88902802571733229619176668713819931811048770190271,
25267680276078003013678680992525463401061632866526,
36270218540497705585629946580636237993140746255962,
24074486908231174977792365466257246923322810917141,
91430288197103288597806669760892938638285025333403,
34413065578016127815921815005561868836468420090470,
23053081172816430487623791969842487255036638784583,
11487696932154902810424020138335124462181441773470,
63783299490636259666498587618221225225512486764533,
67720186971698544312419572409913959008952310058822,
95548255300263520781532296796249481641953868218774,
76085327132285723110424803456124867697064507995236,
37774242535411291684276865538926205024910326572967,
23701913275725675285653248258265463092207058596522,
29798860272258331913126375147341994889534765745501,
18495701454879288984856827726077713721403798879715,
38298203783031473527721580348144513491373226651381,
34829543829199918180278916522431027392251122869539,
40957953066405232632538044100059654939159879593635,
29746152185502371307642255121183693803580388584903,
41698116222072977186158236678424689157993532961922,
62467957194401269043877107275048102390895523597457,
23189706772547915061505504953922979530901129967519,
86188088225875314529584099251203829009407770775672,
11306739708304724483816533873502340845647058077308,
82959174767140363198008187129011875491310547126581,
97623331044818386269515456334926366572897563400500,
42846280183517070527831839425882145521227251250327,
55121603546981200581762165212827652751691296897789,
32238195734329339946437501907836945765883352399886,
75506164965184775180738168837861091527357929701337,
62177842752192623401942399639168044983993173312731,
32924185707147349566916674687634660915035914677504,
99518671430235219628894890102423325116913619626622,
73267460800591547471830798392868535206946944540724,
76841822524674417161514036427982273348055556214818,
97142617910342598647204516893989422179826088076852,
87783646182799346313767754307809363333018982642090,
10848802521674670883215120185883543223812876952786,
71329612474782464538636993009049310363619763878039,
62184073572399794223406235393808339651327408011116,
66627891981488087797941876876144230030984490851411,
60661826293682836764744779239180335110989069790714,
85786944089552990653640447425576083659976645795096,
66024396409905389607120198219976047599490197230297,
64913982680032973156037120041377903785566085089252,
16730939319872750275468906903707539413042652315011,
94809377245048795150954100921645863754710598436791,
78639167021187492431995700641917969777599028300699,
15368713711936614952811305876380278410754449733078,
40789923115535562561142322423255033685442488917353,
44889911501440648020369068063960672322193204149535,
41503128880339536053299340368006977710650566631954,
81234880673210146739058568557934581403627822703280,
82616570773948327592232845941706525094512325230608,
22918802058777319719839450180888072429661980811197,
77158542502016545090413245809786882778948721859617,
72107838435069186155435662884062257473692284509516,
20849603980134001723930671666823555245252804609722,
53503534226472524250874054075591789781264330331690
]

print(str(sum(a))[:10])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5537376230
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Highly divisible triangular number</title>
   <link href="http://localhost:4000/problem-12"/>
   <updated>2020-06-27T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-12</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:&lt;/p&gt;

\[1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\]

&lt;p&gt;Let us list the factors of the first seven triangle numbers:&lt;/p&gt;

&lt;p&gt;1: 1 &lt;br /&gt;
3: 1,3 &lt;br /&gt;
6: 1,2,3,6 &lt;br /&gt;
10: 1,2,5,10 &lt;br /&gt;
15: 1,3,5,15 &lt;br /&gt;
21: 1,3,7,21 &lt;br /&gt;
28: 1,2,4,7,14,28 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We can see that 28 is the first triangle number to have over five divisors.&lt;/p&gt;

&lt;p&gt;What is the value of the first triangle number to have over five hundred divisors?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;i=1
lt=[]
nd=0
div=dict()
def factors(x):
    result = []
    i = 1
    while i*i &amp;lt;= x:
        if x % i == 0:
            result.append(i)
            if x//i != i: 
                result.append(x//i)
        i += 1
    return result
bol=True
while bol:
    lt.append(i)
    su=sum(lt)
    if(len(factors(su))&amp;gt;500):
        print(su)
        bol=False
        break
    i=i+1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;76576500
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Largest Product on Grid</title>
   <link href="http://localhost:4000/problem-11"/>
   <updated>2020-06-27T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-11</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;In the 20×20 grid below, four numbers along a diagonal line have been marked in red.&lt;/p&gt;

&lt;p&gt;08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 &lt;br /&gt; 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 &lt;br /&gt; 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 &lt;br /&gt; 
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 &lt;br /&gt; 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 &lt;br /&gt; 
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 &lt;br /&gt; 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 &lt;br /&gt; 
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 &lt;br /&gt; 
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 &lt;br /&gt; 
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 &lt;br /&gt; 
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 &lt;br /&gt; 
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 &lt;br /&gt; 
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 &lt;br /&gt; 
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 &lt;br /&gt; 
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 &lt;br /&gt; 
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 &lt;br /&gt; 
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 &lt;br /&gt; 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 &lt;br /&gt; 
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 &lt;br /&gt; 
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The product of these numbers is 26 × 63 × 78 × 14 = 1788696.&lt;/p&gt;

&lt;p&gt;What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;arr = [
    [8, 2, 22, 97, 38, 15, 00, 40, 00, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],
    [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 00],
    [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],
    [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],
    [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
    [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
    [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
    [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],
    [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
    [21, 36, 23, 9, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95],
    [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],
    [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57],
    [86, 56, 00, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
    [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],
    [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
    [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
    [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],
    [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],
    [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],
    [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]
];

def biggest_product():
    grid = arr
    product = 0
    product_temp = 0

    col = 20
    row = 20
    for i in range(row):
        for j in range(col):
            if i + 3 &amp;lt; 20:
                product_temp = grid[i][j] * grid[i + 1][j] * grid[i + 2][j] * grid[i + 3][j]

                if product &amp;lt; product_temp:
                    product = product_temp

            if j + 3 &amp;lt; 20:
                product_temp = grid[i][j] * grid[i][j + 1] * grid[i][j + 2] * grid[i][j + 3]

                if product &amp;lt; product_temp:
                    product = product_temp

            if i + 3 &amp;lt; 20 and j + 3 &amp;lt; 20:
                product_temp = grid[i][j] * grid[i + 1][j + 1] * grid[i + 2][j + 2] * grid[i + 3][j + 3]

                if product &amp;lt; product_temp:
                    product = product_temp

    for i in range(20, -1, -1):
        for j in range(20):
            if i + 3 &amp;lt; 20 and j - 3 &amp;gt;= 0:
                product_temp = grid[i][j] * grid[i + 1][j - 1] * grid[i + 2][j - 2] * grid[i + 3][j - 3]

                if product &amp;lt; product_temp:
                    product = product_temp
    return product

print(biggest_product())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;70600674
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Summation of primes</title>
   <link href="http://localhost:4000/problem-10"/>
   <updated>2020-06-27T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-10</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.&lt;/p&gt;

&lt;p&gt;Find the sum of all the primes below two million.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def isPrime(n):
    if n &amp;lt; 2: return &quot;Neither prime, nor composite&quot;
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

sum = 0
for i in range(2, 2000000):
    if isPrime(i):
        sum += i

print (sum)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;142913828922
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Special Pythagorean triplet</title>
   <link href="http://localhost:4000/problem-9"/>
   <updated>2020-06-21T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-9</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;A Pythagorean triplet is a set of three natural numbers, \(a &amp;lt; b &amp;lt; c\), for which,&lt;/p&gt;

\[a^2 + b^2 = c^2\]

&lt;p&gt;For example, \(32 + 42 = 9 + 16 = 25 = 52\).&lt;/p&gt;

&lt;p&gt;There exists exactly one Pythagorean triplet for which&lt;/p&gt;

\[a+b+c=1000\]

&lt;p&gt;Find the product \(abc\).&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;for a in range(1,1000):
    for b in range(a+1,1000):
        c=1000-a-b
        if (a*a+b*b)==c*c:
            print (a*b*c) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;31875000
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Largest product in a series</title>
   <link href="http://localhost:4000/problem-8"/>
   <updated>2020-06-21T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-8</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.&lt;/p&gt;

&lt;p&gt;73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450&lt;/p&gt;

&lt;p&gt;Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;n=&quot;7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450&quot;

l1=[]
final=[]
for i in range(987):
    multi=1
    temp=n[i:i+13]

    l1=list(temp)

    for i in l1:
        multi=multi * int(i)
    
    final.append(multi)

print(sorted(final)[-1])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;23514624000
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>10001st prime</title>
   <link href="http://localhost:4000/problem-7"/>
   <updated>2020-06-21T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-7</id>
   <content type="html">&lt;h2 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h2&gt;

&lt;p&gt;By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;def isPrime(n):
    if n &amp;lt; 2: return &quot;Neither prime, nor composite&quot;
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def nthPrime(n):
    numberOfPrimes = 0
    prime = 1

    while numberOfPrimes &amp;lt; n:
        prime += 1
        if isPrime(prime):
            numberOfPrimes += 1
    return prime

print(nthPrime(10001))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;104743
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Sum square difference</title>
   <link href="http://localhost:4000/problem-6"/>
   <updated>2020-05-30T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-6</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The sum of the squares of the first ten natural numbers is,&lt;/p&gt;

\[1^2+2^2+...+10^2=385\]

&lt;p&gt;The square of the sum of the first ten natural numbers is,&lt;/p&gt;

\[(1+2+...+10)^2=55^2=3025\]

&lt;p&gt;Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025−385=2640.&lt;/p&gt;

&lt;p&gt;Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;n=100
sum100 = (n *(n+1)*(2*n+1))/6

sumsq=(n*(n+1))/2

print((sumsq)**2-sum100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;25164150
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Smallest multiple</title>
   <link href="http://localhost:4000/problem-5"/>
   <updated>2020-05-30T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-5</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.&lt;/p&gt;

&lt;p&gt;What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import math
def lcm(a,b):
    return a*b//math.gcd(a,b)

from functools import reduce
print(reduce(lcm, range(1,20+1)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;232792560
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Largest palindrome product</title>
   <link href="http://localhost:4000/problem-4"/>
   <updated>2020-05-30T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-4</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.&lt;/p&gt;

&lt;p&gt;Find the largest palindrome made from the product of two 3-digit numbers.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;pro=1
temp=&quot;&quot;
palin = []
for i in range(101,1000):
    for j in range(101,1000):
        pro= i*j
        temp=str(pro)
        if temp == temp[::-1]:
            palin.append(int(temp))

print(max(palin))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;906609
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Largest prime factor</title>
   <link href="http://localhost:4000/problem-3"/>
   <updated>2020-05-30T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-3</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;The prime factors of 13195 are 5, 7, 13 and 29.&lt;/p&gt;

&lt;p&gt;What is the largest prime factor of the number 600851475143 ?&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;n = 600851475143
l=[]
i = 2
while i * i &amp;lt;= n:
    if n % i:
        i += 1
    else:
        n //= i
print(n)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;6857
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Even Fibonacci numbers</title>
   <link href="http://localhost:4000/problem-2"/>
   <updated>2020-05-30T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-2</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:&lt;/p&gt;

\[1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\]

&lt;p&gt;By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;n1, n2 = 1, 2
nth=0
l=[]
while n1 &amp;lt; 4*10**6:
    nth = n1 + n2
    if n1%2==0:
        l.append(n1)
    n1 = n2
    n2 = nth

print(sum(l))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;4613732
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Multiple of 3 and 5</title>
   <link href="http://localhost:4000/problem-1"/>
   <updated>2020-05-30T00:00:00+05:30</updated>
   <id>http://localhost:4000/problem-1</id>
   <content type="html">&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;

&lt;p&gt;If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.&lt;/p&gt;

&lt;p&gt;Find the sum of all the multiples of 3 or 5 below 1000.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;l = []

for i in range(1,1000):
    if i%3 == 0:
        l.append(i)

    elif i%5 == 0:
        l.append(i)
    else:
        continue

print(sum(l))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;233168
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 

</feed>
